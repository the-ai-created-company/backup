{
  "service": "firestore",
  "version": "v1",
  "base_url": "https://firestore.googleapis.com/",
  "total_endpoints": 55,
  "endpoints": [
    {
      "operation_id": "firestore.projects.locations.list",
      "resource": "projects.locations",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+name}/locations",
      "description": "Lists information about the supported locations for this service.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The resource that owns the locations collection, if applicable.",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "filter": {
          "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
          "location": "query",
          "type": "string"
        },
        "pageSize": {
          "description": "The maximum number of results to return. If not set, the service selects a default.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
          "location": "query",
          "type": "string"
        },
        "extraLocationTypes": {
          "description": "Optional. A list of extra location types that should be used as conditions for controlling the visibility of the locations.",
          "location": "query",
          "repeated": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "ListLocationsResponse"
    },
    {
      "operation_id": "firestore.projects.locations.get",
      "resource": "projects.locations",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets information about a location.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Resource name for the location.",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Location"
    },
    {
      "operation_id": "firestore.projects.locations.backups.get",
      "resource": "projects.locations.backups",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets information about a backup.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. Name of the backup to fetch. Format is `projects/{project}/locations/{location}/backups/{backup}`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/backups/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1Backup"
    },
    {
      "operation_id": "firestore.projects.locations.backups.list",
      "resource": "projects.locations.backups",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/backups",
      "description": "Lists all the backups.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The location to list backups from. Format is `projects/{project}/locations/{location}`. Use `{location} = '-'` to list backups from all locations for the given project. This allows listing backups from a single location or from all locations.",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "filter": {
          "description": "An expression that filters the list of returned backups. A filter expression consists of a field name, a comparison operator, and a value for filtering. The value must be a string, a number, or a boolean. The comparison operator must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`. Colon `:` is the contains operator. Filter rules are not case sensitive. The following fields in the Backup are eligible for filtering: * `database_uid` (supports `=` only)",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1ListBackupsResponse"
    },
    {
      "operation_id": "firestore.projects.locations.backups.delete",
      "resource": "projects.locations.backups",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a backup.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. Name of the backup to delete. format is `projects/{project}/locations/{location}/backups/{backup}`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/backups/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.exportDocuments",
      "resource": "projects.databases",
      "action": "exportDocuments",
      "http_method": "POST",
      "path_template": "v1/{+name}:exportDocuments",
      "description": "Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. For more details on export behavior and output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1ExportDocumentsRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1ExportDocumentsRequest",
        "description": "The request for FirestoreAdmin.ExportDocuments.",
        "type": "object",
        "properties": {
          "collectionIds": {
            "description": "Which collection IDs to export. Unspecified means all collections. Each collection ID in this list must be unique.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputUriPrefix": {
            "description": "The output URI. Currently only supports Google Cloud Storage URIs of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional Google Cloud Storage namespace path. When choosing a name, be sure to consider Google Cloud Storage naming guidelines: https://cloud.google.com/storage/docs/naming. If the URI is a bucket (without a namespace path), a prefix will be generated based on the start time.",
            "type": "string"
          },
          "namespaceIds": {
            "description": "An empty list represents all namespaces. This is the preferred usage for databases that don't use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "snapshotTime": {
            "description": "The timestamp that corresponds to the version of the database to be exported. The timestamp must be in the past, rounded to the minute and not older than earliestVersionTime. If specified, then the exported documents will represent a consistent view of the database at the provided time. Otherwise, there are no guarantees about the consistency of the exported documents.",
            "type": "string",
            "format": "google-datetime"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.importDocuments",
      "resource": "projects.databases",
      "action": "importDocuments",
      "http_method": "POST",
      "path_template": "v1/{+name}:importDocuments",
      "description": "Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1ImportDocumentsRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1ImportDocumentsRequest",
        "description": "The request for FirestoreAdmin.ImportDocuments.",
        "type": "object",
        "properties": {
          "collectionIds": {
            "description": "Which collection IDs to import. Unspecified means all collections included in the import. Each collection ID in this list must be unique.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inputUriPrefix": {
            "description": "Location of the exported files. This must match the output_uri_prefix of an ExportDocumentsResponse from an export that has completed successfully. See: google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix.",
            "type": "string"
          },
          "namespaceIds": {
            "description": "An empty list represents all namespaces. This is the preferred usage for databases that don't use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.bulkDeleteDocuments",
      "resource": "projects.databases",
      "action": "bulkDeleteDocuments",
      "http_method": "POST",
      "path_template": "v1/{+name}:bulkDeleteDocuments",
      "description": "Bulk deletes a subset of documents from Google Cloud Firestore. Documents created or updated after the underlying system starts to process the request will not be deleted. The bulk delete occurs in the background and its progress can be monitored and managed via the Operation resource that is created. For more details on bulk delete behavior, refer to: https://cloud.google.com/firestore/docs/manage-data/bulk-delete",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. Database to operate. Should be of the form: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1BulkDeleteDocumentsRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1BulkDeleteDocumentsRequest",
        "description": "The request for FirestoreAdmin.BulkDeleteDocuments. When both collection_ids and namespace_ids are set, only documents satisfying both conditions will be deleted. Requests with namespace_ids and collection_ids both empty will be rejected. Please use FirestoreAdmin.DeleteDatabase instead.",
        "type": "object",
        "properties": {
          "collectionIds": {
            "description": "Optional. IDs of the collection groups to delete. Unspecified means all collection groups. Each collection group in this list must be unique.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "namespaceIds": {
            "description": "Optional. Namespaces to delete. An empty list means all namespaces. This is the recommended usage for databases that don't use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn't want to delete from them. Each namespace in this list must be unique.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.create",
      "resource": "projects.databases",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/databases",
      "description": "Create a database.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. A parent name of the form `projects/{project_id}`",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "databaseId": {
          "description": "Required. The ID to use for the database, which will become the final component of the database's resource name. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. \"(default)\" database ID is also valid.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1Database",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1Database",
        "description": "A Cloud Firestore Database.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The resource name of the Database. Format: `projects/{project}/databases/{database}`",
            "type": "string"
          },
          "uid": {
            "description": "Output only. The system-generated UUID4 for this Database.",
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "deleteTime": {
            "description": "Output only. The timestamp at which this database was deleted. Only set if the database has been deleted.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "locationId": {
            "description": "The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.",
            "type": "string"
          },
          "type": {
            "description": "The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Firestore Native Mode",
              "Firestore in Datastore Mode."
            ],
            "enum": [
              "DATABASE_TYPE_UNSPECIFIED",
              "FIRESTORE_NATIVE",
              "DATASTORE_MODE"
            ]
          },
          "concurrencyMode": {
            "description": "The concurrency control mode to use for this database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Use optimistic concurrency control by default. This mode is available for Cloud Firestore databases.",
              "Use pessimistic concurrency control by default. This mode is available for Cloud Firestore databases. This is the default setting for Cloud Firestore.",
              "Use optimistic concurrency control with entity groups by default. This is the only available mode for Cloud Datastore. This mode is also available for Cloud Firestore with Datastore Mode but is not recommended."
            ],
            "enum": [
              "CONCURRENCY_MODE_UNSPECIFIED",
              "OPTIMISTIC",
              "PESSIMISTIC",
              "OPTIMISTIC_WITH_ENTITY_GROUPS"
            ]
          },
          "versionRetentionPeriod": {
            "description": "Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.",
            "readOnly": true,
            "type": "string",
            "format": "google-duration"
          },
          "earliestVersionTime": {
            "description": "Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "pointInTimeRecoveryEnablement": {
            "description": "Whether to enable the PITR feature on this database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Reads are supported on selected versions of the data from within the past 7 days: * Reads against any timestamp within the past hour * Reads against 1-minute snapshots beyond 1 hour and within 7 days `version_retention_period` and `earliest_version_time` can be used to determine the supported versions.",
              "Reads are supported on any version of the data from within the past 1 hour."
            ],
            "enum": [
              "POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED",
              "POINT_IN_TIME_RECOVERY_ENABLED",
              "POINT_IN_TIME_RECOVERY_DISABLED"
            ]
          },
          "appEngineIntegrationMode": {
            "description": "The App Engine integration mode to use for this database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "If an App Engine application exists in the same region as this database, App Engine configuration will impact this database. This includes disabling of the application & database, as well as disabling writes to the database.",
              "App Engine has no effect on the ability of this database to serve requests. This is the default setting for databases created with the Firestore API."
            ],
            "enum": [
              "APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED",
              "ENABLED",
              "DISABLED"
            ]
          },
          "keyPrefix": {
            "description": "Output only. The key_prefix for this database. This key_prefix is used, in combination with the project ID (\"~\") to construct the application ID that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).",
            "readOnly": true,
            "type": "string"
          },
          "deleteProtectionState": {
            "description": "State of delete protection for the database.",
            "type": "string",
            "enumDescriptions": [
              "The default value. Delete protection type is not specified",
              "Delete protection is disabled",
              "Delete protection is enabled"
            ],
            "enum": [
              "DELETE_PROTECTION_STATE_UNSPECIFIED",
              "DELETE_PROTECTION_DISABLED",
              "DELETE_PROTECTION_ENABLED"
            ]
          },
          "cmekConfig": {
            "description": "Optional. Presence indicates CMEK is enabled for this database.",
            "$ref": "GoogleFirestoreAdminV1CmekConfig"
          },
          "previousId": {
            "description": "Output only. The database resource's prior database ID. This field is only populated for deleted databases.",
            "readOnly": true,
            "type": "string"
          },
          "sourceInfo": {
            "description": "Output only. Information about the provenance of this database.",
            "readOnly": true,
            "$ref": "GoogleFirestoreAdminV1SourceInfo"
          },
          "tags": {
            "description": "Optional. Input only. Immutable. Tag keys/values directly bound to this resource. For example: \"123/environment\": \"production\", \"123/costCenter\": \"marketing\"",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "freeTier": {
            "description": "Output only. Background: Free tier is the ability of a Firestore database to use a small amount of resources every day without being charged. Once usage exceeds the free tier limit further usage is charged. Whether this database can make use of the free tier. Only one database per project can be eligible for the free tier. The first (or next) database that is created in a project without a free tier database will be marked as eligible for the free tier. Databases that are created while there is a free tier database will not be eligible for the free tier.",
            "readOnly": true,
            "type": "boolean"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
            "type": "string"
          },
          "databaseEdition": {
            "description": "Immutable. The edition of the database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Standard edition. This is the default setting if not specified.",
              "Enterprise edition."
            ],
            "enum": [
              "DATABASE_EDITION_UNSPECIFIED",
              "STANDARD",
              "ENTERPRISE"
            ]
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.get",
      "resource": "projects.databases",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets information about a database.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1Database"
    },
    {
      "operation_id": "firestore.projects.databases.list",
      "resource": "projects.databases",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/databases",
      "description": "List all the databases in the project.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. A parent name of the form `projects/{project_id}`",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "showDeleted": {
          "description": "If true, also returns deleted resources.",
          "location": "query",
          "type": "boolean"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1ListDatabasesResponse"
    },
    {
      "operation_id": "firestore.projects.databases.patch",
      "resource": "projects.databases",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates a database.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The resource name of the Database. Format: `projects/{project}/databases/{database}`",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "updateMask": {
          "description": "The list of fields to be updated.",
          "location": "query",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1Database",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1Database",
        "description": "A Cloud Firestore Database.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The resource name of the Database. Format: `projects/{project}/databases/{database}`",
            "type": "string"
          },
          "uid": {
            "description": "Output only. The system-generated UUID4 for this Database.",
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "deleteTime": {
            "description": "Output only. The timestamp at which this database was deleted. Only set if the database has been deleted.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "locationId": {
            "description": "The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.",
            "type": "string"
          },
          "type": {
            "description": "The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Firestore Native Mode",
              "Firestore in Datastore Mode."
            ],
            "enum": [
              "DATABASE_TYPE_UNSPECIFIED",
              "FIRESTORE_NATIVE",
              "DATASTORE_MODE"
            ]
          },
          "concurrencyMode": {
            "description": "The concurrency control mode to use for this database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Use optimistic concurrency control by default. This mode is available for Cloud Firestore databases.",
              "Use pessimistic concurrency control by default. This mode is available for Cloud Firestore databases. This is the default setting for Cloud Firestore.",
              "Use optimistic concurrency control with entity groups by default. This is the only available mode for Cloud Datastore. This mode is also available for Cloud Firestore with Datastore Mode but is not recommended."
            ],
            "enum": [
              "CONCURRENCY_MODE_UNSPECIFIED",
              "OPTIMISTIC",
              "PESSIMISTIC",
              "OPTIMISTIC_WITH_ENTITY_GROUPS"
            ]
          },
          "versionRetentionPeriod": {
            "description": "Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.",
            "readOnly": true,
            "type": "string",
            "format": "google-duration"
          },
          "earliestVersionTime": {
            "description": "Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "pointInTimeRecoveryEnablement": {
            "description": "Whether to enable the PITR feature on this database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Reads are supported on selected versions of the data from within the past 7 days: * Reads against any timestamp within the past hour * Reads against 1-minute snapshots beyond 1 hour and within 7 days `version_retention_period` and `earliest_version_time` can be used to determine the supported versions.",
              "Reads are supported on any version of the data from within the past 1 hour."
            ],
            "enum": [
              "POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED",
              "POINT_IN_TIME_RECOVERY_ENABLED",
              "POINT_IN_TIME_RECOVERY_DISABLED"
            ]
          },
          "appEngineIntegrationMode": {
            "description": "The App Engine integration mode to use for this database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "If an App Engine application exists in the same region as this database, App Engine configuration will impact this database. This includes disabling of the application & database, as well as disabling writes to the database.",
              "App Engine has no effect on the ability of this database to serve requests. This is the default setting for databases created with the Firestore API."
            ],
            "enum": [
              "APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED",
              "ENABLED",
              "DISABLED"
            ]
          },
          "keyPrefix": {
            "description": "Output only. The key_prefix for this database. This key_prefix is used, in combination with the project ID (\"~\") to construct the application ID that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).",
            "readOnly": true,
            "type": "string"
          },
          "deleteProtectionState": {
            "description": "State of delete protection for the database.",
            "type": "string",
            "enumDescriptions": [
              "The default value. Delete protection type is not specified",
              "Delete protection is disabled",
              "Delete protection is enabled"
            ],
            "enum": [
              "DELETE_PROTECTION_STATE_UNSPECIFIED",
              "DELETE_PROTECTION_DISABLED",
              "DELETE_PROTECTION_ENABLED"
            ]
          },
          "cmekConfig": {
            "description": "Optional. Presence indicates CMEK is enabled for this database.",
            "$ref": "GoogleFirestoreAdminV1CmekConfig"
          },
          "previousId": {
            "description": "Output only. The database resource's prior database ID. This field is only populated for deleted databases.",
            "readOnly": true,
            "type": "string"
          },
          "sourceInfo": {
            "description": "Output only. Information about the provenance of this database.",
            "readOnly": true,
            "$ref": "GoogleFirestoreAdminV1SourceInfo"
          },
          "tags": {
            "description": "Optional. Input only. Immutable. Tag keys/values directly bound to this resource. For example: \"123/environment\": \"production\", \"123/costCenter\": \"marketing\"",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "freeTier": {
            "description": "Output only. Background: Free tier is the ability of a Firestore database to use a small amount of resources every day without being charged. Once usage exceeds the free tier limit further usage is charged. Whether this database can make use of the free tier. Only one database per project can be eligible for the free tier. The first (or next) database that is created in a project without a free tier database will be marked as eligible for the free tier. Databases that are created while there is a free tier database will not be eligible for the free tier.",
            "readOnly": true,
            "type": "boolean"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
            "type": "string"
          },
          "databaseEdition": {
            "description": "Immutable. The edition of the database.",
            "type": "string",
            "enumDescriptions": [
              "Not used.",
              "Standard edition. This is the default setting if not specified.",
              "Enterprise edition."
            ],
            "enum": [
              "DATABASE_EDITION_UNSPECIFIED",
              "STANDARD",
              "ENTERPRISE"
            ]
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.delete",
      "resource": "projects.databases",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a database.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "etag": {
          "description": "The current etag of the Database. If an etag is provided and does not match the current etag of the database, deletion will be blocked and a FAILED_PRECONDITION error will be returned.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.restore",
      "resource": "projects.databases",
      "action": "restore",
      "http_method": "POST",
      "path_template": "v1/{+parent}/databases:restore",
      "description": "Creates a new database by restoring from an existing backup. The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup. The long-running operation can be used to track the progress of the restore, with the Operation's metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the restore was successful. The new database is not readable or writeable until the LRO has completed.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The project to restore the database in. Format is `projects/{project_id}`.",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1RestoreDatabaseRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1RestoreDatabaseRequest",
        "description": "The request message for FirestoreAdmin.RestoreDatabase.",
        "type": "object",
        "properties": {
          "databaseId": {
            "description": "Required. The ID to use for the database, which will become the final component of the database's resource name. This database ID must not be associated with an existing database. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. \"(default)\" database ID is also valid.",
            "type": "string"
          },
          "backup": {
            "description": "Required. Backup to restore from. Must be from the same project as the parent. The restored database will be created in the same location as the source backup. Format is: `projects/{project_id}/locations/{location}/backups/{backup}`",
            "type": "string"
          },
          "encryptionConfig": {
            "description": "Optional. Encryption configuration for the restored database. If this field is not specified, the restored database will use the same encryption configuration as the backup, namely use_source_encryption.",
            "$ref": "GoogleFirestoreAdminV1EncryptionConfig"
          },
          "tags": {
            "description": "Optional. Immutable. Tags to be bound to the restored database. The tags should be provided in the format of `tagKeys/{tag_key_id} -> tagValues/{tag_value_id}`.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.clone",
      "resource": "projects.databases",
      "action": "clone",
      "http_method": "POST",
      "path_template": "v1/{+parent}/databases:clone",
      "description": "Creates a new database by cloning an existing one. The new database must be in the same cloud region or multi-region location as the existing database. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing database. The long-running operation can be used to track the progress of the clone, with the Operation's metadata field type being the CloneDatabaseMetadata. The response type is the Database if the clone was successful. The new database is not readable or writeable until the LRO has completed.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The project to clone the database in. Format is `projects/{project_id}`.",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1CloneDatabaseRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1CloneDatabaseRequest",
        "description": "The request message for FirestoreAdmin.CloneDatabase.",
        "type": "object",
        "properties": {
          "databaseId": {
            "description": "Required. The ID to use for the database, which will become the final component of the database's resource name. This database ID must not be associated with an existing database. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. \"(default)\" database ID is also valid.",
            "type": "string"
          },
          "pitrSnapshot": {
            "description": "Required. Specification of the PITR data to clone from. The source database must exist. The cloned database will be created in the same location as the source database.",
            "$ref": "GoogleFirestoreAdminV1PitrSnapshot"
          },
          "encryptionConfig": {
            "description": "Optional. Encryption configuration for the cloned database. If this field is not specified, the cloned database will use the same encryption configuration as the source database, namely use_source_encryption.",
            "$ref": "GoogleFirestoreAdminV1EncryptionConfig"
          },
          "tags": {
            "description": "Optional. Immutable. Tags to be bound to the cloned database. The tags should be provided in the format of `tagKeys/{tag_key_id} -> tagValues/{tag_value_id}`.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.operations.list",
      "resource": "projects.databases.operations",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+name}/operations",
      "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of the operation's parent resource.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "filter": {
          "description": "The standard list filter.",
          "location": "query",
          "type": "string"
        },
        "pageSize": {
          "description": "The standard list page size.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "The standard list page token.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningListOperationsResponse"
    },
    {
      "operation_id": "firestore.projects.databases.operations.get",
      "resource": "projects.databases.operations",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of the operation resource.",
          "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.operations.delete",
      "resource": "projects.databases.operations",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of the operation resource to be deleted.",
          "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.operations.cancel",
      "resource": "projects.databases.operations",
      "action": "cancel",
      "http_method": "POST",
      "path_template": "v1/{+name}:cancel",
      "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of the operation resource to be cancelled.",
          "pattern": "^projects/[^/]+/databases/[^/]+/operations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleLongrunningCancelOperationRequest",
      "body_schema": {
        "id": "GoogleLongrunningCancelOperationRequest",
        "description": "The request message for Operations.CancelOperation.",
        "type": "object",
        "properties": {}
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.collectionGroups.indexes.create",
      "resource": "projects.databases.collectionGroups.indexes",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/indexes",
      "description": "Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1Index",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1Index",
        "description": "Cloud Firestore indexes enable simple and complex queries against documents in a database.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.",
            "type": "string"
          },
          "queryScope": {
            "description": "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection ID. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection ID as this index.",
            "type": "string",
            "enumDescriptions": [
              "The query scope is unspecified. Not a valid option.",
              "Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the collection ID specified by the index.",
              "Indexes with a collection group query scope specified allow queries against all collections that has the collection ID specified by the index.",
              "Include all the collections's ancestor in the index. Only available for Datastore Mode databases."
            ],
            "enum": [
              "QUERY_SCOPE_UNSPECIFIED",
              "COLLECTION",
              "COLLECTION_GROUP",
              "COLLECTION_RECURSIVE"
            ]
          },
          "apiScope": {
            "description": "The API scope supported by this index.",
            "type": "string",
            "enumDescriptions": [
              "The index can only be used by the Firestore Native query API. This is the default.",
              "The index can only be used by the Firestore in Datastore Mode query API.",
              "The index can only be used by the MONGODB_COMPATIBLE_API."
            ],
            "enum": [
              "ANY_API",
              "DATASTORE_MODE_API",
              "MONGODB_COMPATIBLE_API"
            ]
          },
          "fields": {
            "description": "The fields supported by this index. For composite indexes, this requires a minimum of 2 and a maximum of 100 fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.",
            "type": "array",
            "items": {
              "$ref": "GoogleFirestoreAdminV1IndexField"
            }
          },
          "state": {
            "description": "Output only. The serving state of the index.",
            "type": "string",
            "enumDescriptions": [
              "The state is unspecified.",
              "The index is being created. There is an active long-running operation for the index. The index is updated when writing a document. Some index data may exist.",
              "The index is ready to be used. The index is updated when writing a document. The index is fully populated from all stored documents it applies to.",
              "The index was being created, but something went wrong. There is no active long-running operation for the index, and the most recently finished long-running operation failed. The index is not updated when writing a document. Some index data may exist. Use the google.longrunning.Operations API to determine why the operation that last attempted to create this index failed, then re-create the index."
            ],
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "NEEDS_REPAIR"
            ]
          },
          "density": {
            "description": "Immutable. The density configuration of the index.",
            "type": "string",
            "enumDescriptions": [
              "Unspecified. It will use database default setting. This value is input only.",
              "In order for an index entry to be added, the document must contain all fields specified in the index. This is the only allowed value for indexes having ApiScope `ANY_API` and `DATASTORE_MODE_API`.",
              "In order for an index entry to be added, the document must contain at least one of the fields specified in the index. Non-existent fields are treated as having a NULL value when generating index entries.",
              "An index entry will be added regardless of whether the document contains any of the fields specified in the index. Non-existent fields are treated as having a NULL value when generating index entries."
            ],
            "enum": [
              "DENSITY_UNSPECIFIED",
              "SPARSE_ALL",
              "SPARSE_ANY",
              "DENSE"
            ]
          },
          "multikey": {
            "description": "Optional. Whether the index is multikey. By default, the index is not multikey. For non-multikey indexes, none of the paths in the index definition reach or traverse an array, except via an explicit array index. For multikey indexes, at most one of the paths in the index definition reach or traverse an array, except via an explicit array index. Violations will result in errors. Note this field only applies to index with MONGODB_COMPATIBLE_API ApiScope.",
            "type": "boolean"
          },
          "shardCount": {
            "description": "Optional. The number of shards for the index.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.collectionGroups.indexes.list",
      "resource": "projects.databases.collectionGroups.indexes",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/indexes",
      "description": "Lists composite indexes.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "filter": {
          "description": "The filter to apply to list results.",
          "location": "query",
          "type": "string"
        },
        "pageSize": {
          "description": "The number of results to return.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get the next page of results.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1ListIndexesResponse"
    },
    {
      "operation_id": "firestore.projects.databases.collectionGroups.indexes.get",
      "resource": "projects.databases.collectionGroups.indexes",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets a composite index.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1Index"
    },
    {
      "operation_id": "firestore.projects.databases.collectionGroups.indexes.delete",
      "resource": "projects.databases.collectionGroups.indexes",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a composite index.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/indexes/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.collectionGroups.fields.get",
      "resource": "projects.databases.collectionGroups.fields",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets the metadata and configuration for a Field.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1Field"
    },
    {
      "operation_id": "firestore.projects.databases.collectionGroups.fields.patch",
      "resource": "projects.databases.collectionGroups.fields",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: \"index_config\" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A field name of the form: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path can be a simple field name, e.g. `address` or a path to fields within `map_value` , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths can be quoted using `` ` `` (backtick). The only character that must be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, `` ` `` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: `` `address.city` `` represents a field named `address.city`, not the map key `city` in the field `address`. `` `*` `` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.",
          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+/fields/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "updateMask": {
          "description": "A mask, relative to the field. If specified, only configuration specified by this field_mask will be updated in the field.",
          "location": "query",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1Field",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1Field",
        "description": "Represents a single field in the database. Fields are grouped by their \"Collection Group\", which represent all collections in the database with the same ID.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Required. A field name of the form: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path can be a simple field name, e.g. `address` or a path to fields within `map_value` , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths can be quoted using `` ` `` (backtick). The only character that must be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, `` ` `` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: `` `address.city` `` represents a field named `address.city`, not the map key `city` in the field `address`. `` `*` `` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.",
            "type": "string"
          },
          "indexConfig": {
            "description": "The index configuration for this field. If unset, field indexing will revert to the configuration defined by the `ancestor_field`. To explicitly remove all indexes for this field, specify an index config with an empty list of indexes.",
            "$ref": "GoogleFirestoreAdminV1IndexConfig"
          },
          "ttlConfig": {
            "description": "The TTL configuration for this `Field`. Setting or unsetting this will enable or disable the TTL for documents that have this `Field`.",
            "$ref": "GoogleFirestoreAdminV1TtlConfig"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleLongrunningOperation"
    },
    {
      "operation_id": "firestore.projects.databases.collectionGroups.fields.list",
      "resource": "projects.databases.collectionGroups.fields",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/fields",
      "description": "Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/collectionGroups/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "filter": {
          "description": "The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with a filter that includes `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`.",
          "location": "query",
          "type": "string"
        },
        "pageSize": {
          "description": "The number of results to return.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get the next page of results.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1ListFieldsResponse"
    },
    {
      "operation_id": "firestore.projects.databases.userCreds.create",
      "resource": "projects.databases.userCreds",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/userCreds",
      "description": "Create a user creds.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. A parent name of the form `projects/{project_id}/databases/{database_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "userCredsId": {
          "description": "Required. The ID to use for the user creds, which will become the final component of the user creds's resource name. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1UserCreds",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1UserCreds",
        "description": "A Cloud Firestore User Creds.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Identifier. The resource name of the UserCreds. Format: `projects/{project}/databases/{database}/userCreds/{user_creds}`",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time the user creds were created.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Output only. The time the user creds were last updated.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "state": {
            "description": "Output only. Whether the user creds are enabled or disabled. Defaults to ENABLED on creation.",
            "readOnly": true,
            "type": "string",
            "enumDescriptions": [
              "The default value. Should not be used.",
              "The user creds are enabled.",
              "The user creds are disabled."
            ],
            "enum": [
              "STATE_UNSPECIFIED",
              "ENABLED",
              "DISABLED"
            ]
          },
          "securePassword": {
            "description": "Output only. The plaintext server-generated password for the user creds. Only populated in responses for CreateUserCreds and ResetUserPassword.",
            "readOnly": true,
            "type": "string"
          },
          "resourceIdentity": {
            "description": "Resource Identity descriptor.",
            "$ref": "GoogleFirestoreAdminV1ResourceIdentity"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1UserCreds"
    },
    {
      "operation_id": "firestore.projects.databases.userCreds.get",
      "resource": "projects.databases.userCreds",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets a user creds resource. Note that the returned resource does not contain the secret value itself.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/userCreds/{user_creds_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/userCreds/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1UserCreds"
    },
    {
      "operation_id": "firestore.projects.databases.userCreds.list",
      "resource": "projects.databases.userCreds",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/userCreds",
      "description": "List all user creds in the database. Note that the returned resource does not contain the secret value itself.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. A parent database name of the form `projects/{project_id}/databases/{database_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1ListUserCredsResponse"
    },
    {
      "operation_id": "firestore.projects.databases.userCreds.enable",
      "resource": "projects.databases.userCreds",
      "action": "enable",
      "http_method": "POST",
      "path_template": "v1/{+name}:enable",
      "description": "Enables a user creds. No-op if the user creds are already enabled.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/userCreds/{user_creds_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/userCreds/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1EnableUserCredsRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1EnableUserCredsRequest",
        "description": "The request for FirestoreAdmin.EnableUserCreds.",
        "type": "object",
        "properties": {}
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1UserCreds"
    },
    {
      "operation_id": "firestore.projects.databases.userCreds.disable",
      "resource": "projects.databases.userCreds",
      "action": "disable",
      "http_method": "POST",
      "path_template": "v1/{+name}:disable",
      "description": "Disables a user creds. No-op if the user creds are already disabled.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/userCreds/{user_creds_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/userCreds/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1DisableUserCredsRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1DisableUserCredsRequest",
        "description": "The request for FirestoreAdmin.DisableUserCreds.",
        "type": "object",
        "properties": {}
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1UserCreds"
    },
    {
      "operation_id": "firestore.projects.databases.userCreds.resetPassword",
      "resource": "projects.databases.userCreds",
      "action": "resetPassword",
      "http_method": "POST",
      "path_template": "v1/{+name}:resetPassword",
      "description": "Resets the password of a user creds.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/userCreds/{user_creds_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/userCreds/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1ResetUserPasswordRequest",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1ResetUserPasswordRequest",
        "description": "The request for FirestoreAdmin.ResetUserPassword.",
        "type": "object",
        "properties": {}
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1UserCreds"
    },
    {
      "operation_id": "firestore.projects.databases.userCreds.delete",
      "resource": "projects.databases.userCreds",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a user creds.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. A name of the form `projects/{project_id}/databases/{database_id}/userCreds/{user_creds_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/userCreds/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.backupSchedules.create",
      "resource": "projects.databases.backupSchedules",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/backupSchedules",
      "description": "Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule and one weekly backup schedule.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent database. Format `projects/{project}/databases/{database}`",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1BackupSchedule",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1BackupSchedule",
        "description": "A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "retention": {
            "description": "At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days. The maximum supported retention period is 14 weeks.",
            "type": "string",
            "format": "google-duration"
          },
          "dailyRecurrence": {
            "description": "For a schedule that runs daily.",
            "$ref": "GoogleFirestoreAdminV1DailyRecurrence"
          },
          "weeklyRecurrence": {
            "description": "For a schedule that runs weekly on a specific day.",
            "$ref": "GoogleFirestoreAdminV1WeeklyRecurrence"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1BackupSchedule"
    },
    {
      "operation_id": "firestore.projects.databases.backupSchedules.get",
      "resource": "projects.databases.backupSchedules",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets information about a backup schedule.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The name of the backup schedule. Format `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1BackupSchedule"
    },
    {
      "operation_id": "firestore.projects.databases.backupSchedules.list",
      "resource": "projects.databases.backupSchedules",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/backupSchedules",
      "description": "List backup schedules.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent database. Format is `projects/{project}/databases/{database}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1ListBackupSchedulesResponse"
    },
    {
      "operation_id": "firestore.projects.databases.backupSchedules.patch",
      "resource": "projects.databases.backupSchedules",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates a backup schedule.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "updateMask": {
          "description": "The list of fields to be updated.",
          "location": "query",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "body_schema_ref": "GoogleFirestoreAdminV1BackupSchedule",
      "body_schema": {
        "id": "GoogleFirestoreAdminV1BackupSchedule",
        "description": "A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "retention": {
            "description": "At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days. The maximum supported retention period is 14 weeks.",
            "type": "string",
            "format": "google-duration"
          },
          "dailyRecurrence": {
            "description": "For a schedule that runs daily.",
            "$ref": "GoogleFirestoreAdminV1DailyRecurrence"
          },
          "weeklyRecurrence": {
            "description": "For a schedule that runs weekly on a specific day.",
            "$ref": "GoogleFirestoreAdminV1WeeklyRecurrence"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "GoogleFirestoreAdminV1BackupSchedule"
    },
    {
      "operation_id": "firestore.projects.databases.backupSchedules.delete",
      "resource": "projects.databases.backupSchedules",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a backup schedule.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The name of the backup schedule. Format `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/backupSchedules/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.documents.get",
      "resource": "projects.databases.documents",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets a single document.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the Document to get. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "mask.fieldPaths": {
          "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
          "location": "query",
          "repeated": true,
          "type": "string"
        },
        "transaction": {
          "description": "Reads the document in a transaction.",
          "location": "query",
          "type": "string",
          "format": "byte"
        },
        "readTime": {
          "description": "Reads the version of the document at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "location": "query",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Document"
    },
    {
      "operation_id": "firestore.projects.databases.documents.list",
      "resource": "projects.databases.documents",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/{collectionId}",
      "description": "Lists documents.",
      "required_params": [
        "parent",
        "collectionId"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "collectionId": {
          "description": "Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`. This is optional, and when not provided, Firestore will list documents from all collections under the provided `parent`.",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "pageSize": {
          "description": "Optional. The maximum number of documents to return in a single response. Firestore may return fewer than this value.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must match the values set in the request that generated the page token.",
          "location": "query",
          "type": "string"
        },
        "orderBy": {
          "description": "Optional. The optional ordering of the documents to return. For example: `priority desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When absent, documents are ordered based on `__name__ ASC`.",
          "location": "query",
          "type": "string"
        },
        "mask.fieldPaths": {
          "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
          "location": "query",
          "repeated": true,
          "type": "string"
        },
        "transaction": {
          "description": "Perform the read as part of an already active transaction.",
          "location": "query",
          "type": "string",
          "format": "byte"
        },
        "readTime": {
          "description": "Perform the read at the provided time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "location": "query",
          "type": "string",
          "format": "google-datetime"
        },
        "showMissing": {
          "description": "If the list should show missing documents. A document is missing if it does not exist, but there are sub-documents nested underneath it. When true, such missing documents will be returned with a key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may not specify `where` or `order_by`.",
          "location": "query",
          "type": "boolean"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "ListDocumentsResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.listDocuments",
      "resource": "projects.databases.documents",
      "action": "listDocuments",
      "http_method": "GET",
      "path_template": "v1/{+parent}/{collectionId}",
      "description": "Lists documents.",
      "required_params": [
        "parent",
        "collectionId"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "collectionId": {
          "description": "Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`. This is optional, and when not provided, Firestore will list documents from all collections under the provided `parent`.",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "pageSize": {
          "description": "Optional. The maximum number of documents to return in a single response. Firestore may return fewer than this value.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must match the values set in the request that generated the page token.",
          "location": "query",
          "type": "string"
        },
        "orderBy": {
          "description": "Optional. The optional ordering of the documents to return. For example: `priority desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When absent, documents are ordered based on `__name__ ASC`.",
          "location": "query",
          "type": "string"
        },
        "mask.fieldPaths": {
          "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
          "location": "query",
          "repeated": true,
          "type": "string"
        },
        "transaction": {
          "description": "Perform the read as part of an already active transaction.",
          "location": "query",
          "type": "string",
          "format": "byte"
        },
        "readTime": {
          "description": "Perform the read at the provided time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
          "location": "query",
          "type": "string",
          "format": "google-datetime"
        },
        "showMissing": {
          "description": "If the list should show missing documents. A document is missing if it does not exist, but there are sub-documents nested underneath it. When true, such missing documents will be returned with a key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may not specify `where` or `order_by`.",
          "location": "query",
          "type": "boolean"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "ListDocumentsResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.patch",
      "resource": "projects.databases.documents",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates or inserts a document.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "updateMask.fieldPaths": {
          "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
          "location": "query",
          "repeated": true,
          "type": "string"
        },
        "mask.fieldPaths": {
          "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
          "location": "query",
          "repeated": true,
          "type": "string"
        },
        "currentDocument.exists": {
          "description": "When set to `true`, the target document must exist. When set to `false`, the target document must not exist.",
          "location": "query",
          "type": "boolean"
        },
        "currentDocument.updateTime": {
          "description": "When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.",
          "location": "query",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "body_schema_ref": "Document",
      "body_schema": {
        "id": "Document",
        "description": "A Firestore document. Must not exceed 1 MiB - 4 bytes.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
            "type": "string"
          },
          "fields": {
            "description": "The document's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The field names, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty. Field paths may be used in other contexts to refer to structured fields defined here. For `map_value`, the field path is represented by a dot-delimited (`.`) string of segments. Each segment is either a simple field name (defined below) or a quoted field name. For example, the structured field `\"foo\" : { map_value: { \"x&y\" : { string_value: \"hello\" }}}` would be represented by the field path `` foo.`x&y` ``. A simple field name contains only characters `a` to `z`, `A` to `Z`, `0` to `9`, or `_`, and must not start with `0` to `9`. For example, `foo_bar_17`. A quoted field name starts and ends with `` ` `` and may contain any character. Some characters, including `` ` ``, must be escaped using a `\\`. For example, `` `x&y` `` represents `x&y` and `` `bak\\`tik` `` represents `` bak`tik ``.",
            "type": "object",
            "additionalProperties": {
              "$ref": "Value"
            }
          },
          "createTime": {
            "description": "Output only. The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.",
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Output only. The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query.",
            "type": "string",
            "format": "google-datetime"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Document"
    },
    {
      "operation_id": "firestore.projects.databases.documents.delete",
      "resource": "projects.databases.documents",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a document.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the Document to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "currentDocument.exists": {
          "description": "When set to `true`, the target document must exist. When set to `false`, the target document must not exist.",
          "location": "query",
          "type": "boolean"
        },
        "currentDocument.updateTime": {
          "description": "When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.",
          "location": "query",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.documents.batchGet",
      "resource": "projects.databases.documents",
      "action": "batchGet",
      "http_method": "POST",
      "path_template": "v1/{+database}/documents:batchGet",
      "description": "Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.",
      "required_params": [
        "database"
      ],
      "parameters": {
        "database": {
          "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "BatchGetDocumentsRequest",
      "body_schema": {
        "id": "BatchGetDocumentsRequest",
        "description": "The request for Firestore.BatchGetDocuments.",
        "type": "object",
        "properties": {
          "documents": {
            "description": "The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mask": {
            "description": "The fields to return. If not set, returns all fields. If a document has a field that is not present in this mask, that field will not be returned in the response.",
            "$ref": "DocumentMask"
          },
          "transaction": {
            "description": "Reads documents in a transaction.",
            "type": "string",
            "format": "byte"
          },
          "newTransaction": {
            "description": "Starts a new transaction and reads the documents. Defaults to a read-only transaction. The new transaction ID will be returned as the first response in the stream.",
            "$ref": "TransactionOptions"
          },
          "readTime": {
            "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "type": "string",
            "format": "google-datetime"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "BatchGetDocumentsResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.beginTransaction",
      "resource": "projects.databases.documents",
      "action": "beginTransaction",
      "http_method": "POST",
      "path_template": "v1/{+database}/documents:beginTransaction",
      "description": "Starts a new transaction.",
      "required_params": [
        "database"
      ],
      "parameters": {
        "database": {
          "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "BeginTransactionRequest",
      "body_schema": {
        "id": "BeginTransactionRequest",
        "description": "The request for Firestore.BeginTransaction.",
        "type": "object",
        "properties": {
          "options": {
            "description": "The options for the transaction. Defaults to a read-write transaction.",
            "$ref": "TransactionOptions"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "BeginTransactionResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.commit",
      "resource": "projects.databases.documents",
      "action": "commit",
      "http_method": "POST",
      "path_template": "v1/{+database}/documents:commit",
      "description": "Commits a transaction, while optionally updating documents.",
      "required_params": [
        "database"
      ],
      "parameters": {
        "database": {
          "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "CommitRequest",
      "body_schema": {
        "id": "CommitRequest",
        "description": "The request for Firestore.Commit.",
        "type": "object",
        "properties": {
          "writes": {
            "description": "The writes to apply. Always executed atomically and in order.",
            "type": "array",
            "items": {
              "$ref": "Write"
            }
          },
          "transaction": {
            "description": "If set, applies all writes in this transaction, and commits it.",
            "type": "string",
            "format": "byte"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "CommitResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.rollback",
      "resource": "projects.databases.documents",
      "action": "rollback",
      "http_method": "POST",
      "path_template": "v1/{+database}/documents:rollback",
      "description": "Rolls back a transaction.",
      "required_params": [
        "database"
      ],
      "parameters": {
        "database": {
          "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "RollbackRequest",
      "body_schema": {
        "id": "RollbackRequest",
        "description": "The request for Firestore.Rollback.",
        "type": "object",
        "properties": {
          "transaction": {
            "description": "Required. The transaction to roll back.",
            "type": "string",
            "format": "byte"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "firestore.projects.databases.documents.runQuery",
      "resource": "projects.databases.documents",
      "action": "runQuery",
      "http_method": "POST",
      "path_template": "v1/{+parent}:runQuery",
      "description": "Runs a query.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "RunQueryRequest",
      "body_schema": {
        "id": "RunQueryRequest",
        "description": "The request for Firestore.RunQuery.",
        "type": "object",
        "properties": {
          "structuredQuery": {
            "description": "A structured query.",
            "$ref": "StructuredQuery"
          },
          "transaction": {
            "description": "Run the query within an already active transaction. The value here is the opaque transaction ID to execute the query in.",
            "type": "string",
            "format": "byte"
          },
          "newTransaction": {
            "description": "Starts a new transaction and reads the documents. Defaults to a read-only transaction. The new transaction ID will be returned as the first response in the stream.",
            "$ref": "TransactionOptions"
          },
          "readTime": {
            "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "type": "string",
            "format": "google-datetime"
          },
          "explainOptions": {
            "description": "Optional. Explain options for the query. If set, additional query statistics will be returned. If not, only query results will be returned.",
            "$ref": "ExplainOptions"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "RunQueryResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.runAggregationQuery",
      "resource": "projects.databases.documents",
      "action": "runAggregationQuery",
      "http_method": "POST",
      "path_template": "v1/{+parent}:runAggregationQuery",
      "description": "Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ```",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "RunAggregationQueryRequest",
      "body_schema": {
        "id": "RunAggregationQueryRequest",
        "description": "The request for Firestore.RunAggregationQuery.",
        "type": "object",
        "properties": {
          "structuredAggregationQuery": {
            "description": "An aggregation query.",
            "$ref": "StructuredAggregationQuery"
          },
          "transaction": {
            "description": "Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.",
            "type": "string",
            "format": "byte"
          },
          "newTransaction": {
            "description": "Starts a new transaction as part of the query, defaulting to read-only. The new transaction ID will be returned as the first response in the stream.",
            "$ref": "TransactionOptions"
          },
          "readTime": {
            "description": "Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "type": "string",
            "format": "google-datetime"
          },
          "explainOptions": {
            "description": "Optional. Explain options for the query. If set, additional query statistics will be returned. If not, only query results will be returned.",
            "$ref": "ExplainOptions"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "RunAggregationQueryResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.partitionQuery",
      "resource": "projects.databases.documents",
      "action": "partitionQuery",
      "http_method": "POST",
      "path_template": "v1/{+parent}:partitionQuery",
      "description": "Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents`. Document resource names are not supported; only database resource names can be specified.",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "PartitionQueryRequest",
      "body_schema": {
        "id": "PartitionQueryRequest",
        "description": "The request for Firestore.PartitionQuery.",
        "type": "object",
        "properties": {
          "structuredQuery": {
            "description": "A structured query. Query must specify collection with all descendants and be ordered by name ascending. Other filters, order bys, limits, offsets, and start/end cursors are not supported.",
            "$ref": "StructuredQuery"
          },
          "partitionCount": {
            "description": "The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available.",
            "type": "string",
            "format": "int64"
          },
          "pageToken": {
            "description": "The `next_page_token` value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W",
            "type": "string"
          },
          "pageSize": {
            "description": "The maximum number of partitions to return in this call, subject to `partition_count`. For example, if `partition_count` = 10 and `page_size` = 8, the first call to PartitionQuery will return up to 8 partitions and a `next_page_token` if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in `partition_count`.",
            "type": "integer",
            "format": "int32"
          },
          "readTime": {
            "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "type": "string",
            "format": "google-datetime"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "PartitionQueryResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.write",
      "resource": "projects.databases.documents",
      "action": "write",
      "http_method": "POST",
      "path_template": "v1/{+database}/documents:write",
      "description": "Streams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST).",
      "required_params": [
        "database"
      ],
      "parameters": {
        "database": {
          "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`. This is only required in the first message.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "WriteRequest",
      "body_schema": {
        "id": "WriteRequest",
        "description": "The request for Firestore.Write. The first request creates a stream, or resumes an existing one from a token. When creating a new stream, the server replies with a response containing only an ID and a token, to use in the next request. When resuming a stream, the server first streams any responses later than the given token, then a response containing only an up-to-date token, to use in the next request.",
        "type": "object",
        "properties": {
          "streamId": {
            "description": "The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created.",
            "type": "string"
          },
          "writes": {
            "description": "The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.",
            "type": "array",
            "items": {
              "$ref": "Write"
            }
          },
          "streamToken": {
            "description": "A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the `stream_id` field. Leave this field unset when creating a new stream.",
            "type": "string",
            "format": "byte"
          },
          "labels": {
            "description": "Labels associated with this write request.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "WriteResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.listen",
      "resource": "projects.databases.documents",
      "action": "listen",
      "http_method": "POST",
      "path_template": "v1/{+database}/documents:listen",
      "description": "Listens to changes. This method is only available via gRPC or WebChannel (not REST).",
      "required_params": [
        "database"
      ],
      "parameters": {
        "database": {
          "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "ListenRequest",
      "body_schema": {
        "id": "ListenRequest",
        "description": "A request for Firestore.Listen",
        "type": "object",
        "properties": {
          "addTarget": {
            "description": "A target to add to this stream.",
            "$ref": "Target"
          },
          "removeTarget": {
            "description": "The ID of a target to remove from this stream.",
            "type": "integer",
            "format": "int32"
          },
          "labels": {
            "description": "Labels associated with this target change.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "ListenResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.listCollectionIds",
      "resource": "projects.databases.documents",
      "action": "listCollectionIds",
      "http_method": "POST",
      "path_template": "v1/{+parent}:listCollectionIds",
      "description": "Lists all the collection IDs underneath a document.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent document. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/[^/]+/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "ListCollectionIdsRequest",
      "body_schema": {
        "id": "ListCollectionIdsRequest",
        "description": "The request for Firestore.ListCollectionIds.",
        "type": "object",
        "properties": {
          "pageSize": {
            "description": "The maximum number of results to return.",
            "type": "integer",
            "format": "int32"
          },
          "pageToken": {
            "description": "A page token. Must be a value from ListCollectionIdsResponse.",
            "type": "string"
          },
          "readTime": {
            "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "type": "string",
            "format": "google-datetime"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "ListCollectionIdsResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.batchWrite",
      "resource": "projects.databases.documents",
      "action": "batchWrite",
      "http_method": "POST",
      "path_template": "v1/{+database}/documents:batchWrite",
      "description": "Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.",
      "required_params": [
        "database"
      ],
      "parameters": {
        "database": {
          "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.",
          "pattern": "^projects/[^/]+/databases/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "BatchWriteRequest",
      "body_schema": {
        "id": "BatchWriteRequest",
        "description": "The request for Firestore.BatchWrite.",
        "type": "object",
        "properties": {
          "writes": {
            "description": "The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request.",
            "type": "array",
            "items": {
              "$ref": "Write"
            }
          },
          "labels": {
            "description": "Labels associated with this batch write.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "BatchWriteResponse"
    },
    {
      "operation_id": "firestore.projects.databases.documents.createDocument",
      "resource": "projects.databases.documents",
      "action": "createDocument",
      "http_method": "POST",
      "path_template": "v1/{+parent}/{collectionId}",
      "description": "Creates a new document.",
      "required_params": [
        "parent",
        "collectionId"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The parent resource. For example: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`",
          "pattern": "^projects/[^/]+/databases/[^/]+/documents/.*$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "collectionId": {
          "description": "Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "documentId": {
          "description": "The client-assigned document ID to use for this document. Optional. If not specified, an ID will be assigned by the service.",
          "location": "query",
          "type": "string"
        },
        "mask.fieldPaths": {
          "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
          "location": "query",
          "repeated": true,
          "type": "string"
        }
      },
      "body_schema_ref": "Document",
      "body_schema": {
        "id": "Document",
        "description": "A Firestore document. Must not exceed 1 MiB - 4 bytes.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
            "type": "string"
          },
          "fields": {
            "description": "The document's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The field names, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty. Field paths may be used in other contexts to refer to structured fields defined here. For `map_value`, the field path is represented by a dot-delimited (`.`) string of segments. Each segment is either a simple field name (defined below) or a quoted field name. For example, the structured field `\"foo\" : { map_value: { \"x&y\" : { string_value: \"hello\" }}}` would be represented by the field path `` foo.`x&y` ``. A simple field name contains only characters `a` to `z`, `A` to `Z`, `0` to `9`, or `_`, and must not start with `0` to `9`. For example, `foo_bar_17`. A quoted field name starts and ends with `` ` `` and may contain any character. Some characters, including `` ` ``, must be escaped using a `\\`. For example, `` `x&y` `` represents `x&y` and `` `bak\\`tik` `` represents `` bak`tik ``.",
            "type": "object",
            "additionalProperties": {
              "$ref": "Value"
            }
          },
          "createTime": {
            "description": "Output only. The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.",
            "type": "string",
            "format": "google-datetime"
          },
          "updateTime": {
            "description": "Output only. The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query.",
            "type": "string",
            "format": "google-datetime"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/datastore"
      ],
      "response_type": "Document"
    }
  ]
}