{
  "service": "cloudfunctions",
  "version": "v1",
  "base_url": "https://cloudfunctions.googleapis.com/",
  "total_endpoints": 14,
  "endpoints": [
    {
      "operation_id": "cloudfunctions.operations.list",
      "resource": "operations",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/operations",
      "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.",
      "required_params": [],
      "parameters": {
        "name": {
          "description": "The name of the operation's parent resource.",
          "location": "query",
          "type": "string"
        },
        "filter": {
          "description": "The standard list filter.",
          "location": "query",
          "type": "string"
        },
        "pageSize": {
          "description": "The standard list page size.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "The standard list page token.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListOperationsResponse"
    },
    {
      "operation_id": "cloudfunctions.operations.get",
      "resource": "operations",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of the operation resource.",
          "pattern": "^operations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.list",
      "resource": "projects.locations",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+name}/locations",
      "description": "Lists information about the supported locations for this service.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The resource that owns the locations collection, if applicable.",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "filter": {
          "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
          "location": "query",
          "type": "string"
        },
        "pageSize": {
          "description": "The maximum number of results to return. If not set, the service selects a default.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
          "location": "query",
          "type": "string"
        },
        "extraLocationTypes": {
          "description": "Optional. A list of extra location types that should be used as conditions for controlling the visibility of the locations.",
          "location": "query",
          "repeated": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListLocationsResponse"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.list",
      "resource": "projects.locations.functions",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/functions",
      "description": "Returns a list of functions that belong to the requested project.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "The project and location from which the function should be listed, specified in the format `projects/*/locations/*` If you want to list functions in all locations, use \"-\" in place of a location. When listing functions in all locations, if one or more location(s) are unreachable, the response will contain functions from all reachable locations along with the names of any unreachable locations.",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "pageSize": {
          "description": "Maximum number of functions to return per call.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "The value returned by the last `ListFunctionsResponse`; indicates that this is a continuation of a prior `ListFunctions` call, and that the system should return the next page of data.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListFunctionsResponse"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.get",
      "resource": "projects.locations.functions",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Returns a function with the given name from the requested project.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The name of the function which details should be obtained.",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "versionId": {
          "description": "Optional. The optional version of the function whose details should be obtained. The version of a 1st Gen function is an integer that starts from 1 and gets incremented on redeployments. Each deployment creates a config version of the underlying function. GCF may keep historical configs for old versions. This field can be specified to fetch the historical configs. Leave it blank or set to 0 to get the latest version of the function.",
          "location": "query",
          "type": "string",
          "format": "int64"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "CloudFunction"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.create",
      "resource": "projects.locations.functions",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+location}/functions",
      "description": "Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.",
      "required_params": [
        "location"
      ],
      "parameters": {
        "location": {
          "description": "Required. The project and location in which the function should be created, specified in the format `projects/*/locations/*`",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "CloudFunction",
      "body_schema": {
        "id": "CloudFunction",
        "description": "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations.",
        "type": "object",
        "properties": {
          "name": {
            "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
            "type": "string"
          },
          "description": {
            "description": "User-provided description of a function.",
            "type": "string"
          },
          "sourceArchiveUrl": {
            "description": "The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.",
            "type": "string"
          },
          "sourceRepository": {
            "description": "**Beta Feature** The source repository where a function is hosted.",
            "$ref": "SourceRepository"
          },
          "sourceUploadUrl": {
            "description": "The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)",
            "type": "string"
          },
          "httpsTrigger": {
            "description": "An HTTPS endpoint type of source that can be triggered via URL.",
            "$ref": "HttpsTrigger"
          },
          "eventTrigger": {
            "description": "A source that fires events in response to a condition in another service.",
            "$ref": "EventTrigger"
          },
          "status": {
            "description": "Output only. Status of the function deployment.",
            "readOnly": true,
            "type": "string",
            "enumDescriptions": [
              "Not specified. Invalid state.",
              "Function has been successfully deployed and is serving.",
              "Function deployment failed and the function isn\u2019t serving.",
              "Function is being created or updated.",
              "Function is being deleted.",
              "Function deployment failed and the function serving state is undefined. The function should be updated or deleted to move it out of this state."
            ],
            "enum": [
              "CLOUD_FUNCTION_STATUS_UNSPECIFIED",
              "ACTIVE",
              "OFFLINE",
              "DEPLOY_IN_PROGRESS",
              "DELETE_IN_PROGRESS",
              "UNKNOWN"
            ]
          },
          "entryPoint": {
            "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.",
            "type": "string"
          },
          "runtime": {
            "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).",
            "type": "string"
          },
          "timeout": {
            "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
            "type": "string",
            "format": "google-duration"
          },
          "availableMemoryMb": {
            "description": "The amount of memory in MB available for a function. Defaults to 256MB.",
            "type": "integer",
            "format": "int32"
          },
          "serviceAccountEmail": {
            "description": "The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last update timestamp of a Cloud Function.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "versionId": {
            "description": "Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.",
            "readOnly": true,
            "type": "string",
            "format": "int64"
          },
          "labels": {
            "description": "Labels associated with this Cloud Function.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "environmentVariables": {
            "description": "Environment variables that shall be available during function execution.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "buildEnvironmentVariables": {
            "description": "Build environment variables that shall be available during build time.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "network": {
            "description": "Deprecated: use vpc_connector",
            "deprecated": true,
            "type": "string"
          },
          "maxInstances": {
            "description": "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.",
            "type": "integer",
            "format": "int32"
          },
          "minInstances": {
            "description": "A lower bound for the number function instances that may coexist at a given time.",
            "type": "integer",
            "format": "int32"
          },
          "vpcConnector": {
            "description": "The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.",
            "type": "string"
          },
          "vpcConnectorEgressSettings": {
            "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Use the VPC Access Connector only for private IP space from RFC1918.",
              "Force the use of VPC Access Connector for all egress traffic from the function."
            ],
            "enum": [
              "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",
              "PRIVATE_RANGES_ONLY",
              "ALL_TRAFFIC"
            ]
          },
          "ingressSettings": {
            "description": "The ingress settings for the function, controlling what traffic can reach it.",
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Allow HTTP traffic from public and private sources.",
              "Allow HTTP traffic from only private VPC sources.",
              "Allow HTTP traffic from private VPC sources and through GCLB."
            ],
            "enum": [
              "INGRESS_SETTINGS_UNSPECIFIED",
              "ALLOW_ALL",
              "ALLOW_INTERNAL_ONLY",
              "ALLOW_INTERNAL_AND_GCLB"
            ]
          },
          "kmsKeyName": {
            "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.",
            "type": "string"
          },
          "buildWorkerPool": {
            "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.",
            "type": "string"
          },
          "buildId": {
            "description": "Output only. The Cloud Build ID of the latest successful deployment of the function.",
            "readOnly": true,
            "type": "string"
          },
          "buildName": {
            "description": "Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.",
            "readOnly": true,
            "type": "string"
          },
          "secretEnvironmentVariables": {
            "description": "Secret environment variables configuration.",
            "type": "array",
            "items": {
              "$ref": "SecretEnvVar"
            }
          },
          "secretVolumes": {
            "description": "Secret volumes configuration.",
            "type": "array",
            "items": {
              "$ref": "SecretVolume"
            }
          },
          "sourceToken": {
            "description": "Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
            "type": "string"
          },
          "dockerRepository": {
            "description": "User-managed repository created in Artifact Registry to which the function's Docker image will be pushed after it is built by Cloud Build. May optionally be encrypted with a customer-managed encryption key (CMEK). If unspecified and `docker_registry` is not explicitly set to `CONTAINER_REGISTRY`, GCF will create and use a default Artifact Registry repository named 'gcf-artifacts' in the region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
            "type": "string"
          },
          "dockerRegistry": {
            "description": "Docker Registry to use for this deployment. Deprecated: as of March 2025, `CONTAINER_REGISTRY` option is no longer available in response to Container Registry's deprecation: https://cloud.google.com/artifact-registry/docs/transition/transition-from-gcr Please use Artifact Registry instead, which is the default choice. If unspecified, it defaults to `ARTIFACT_REGISTRY`. If `docker_repository` field is specified, this field should either be left unspecified or set to `ARTIFACT_REGISTRY`.",
            "deprecated": true,
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Docker images will be stored in multi-regional Container Registry repositories named `gcf`.",
              "Docker images will be stored in regional Artifact Registry repositories. By default, GCF will create and use repositories named `gcf-artifacts` in every region in which a function is deployed. But the repository to use can also be specified by the user using the `docker_repository` field."
            ],
            "enum": [
              "DOCKER_REGISTRY_UNSPECIFIED",
              "CONTAINER_REGISTRY",
              "ARTIFACT_REGISTRY"
            ]
          },
          "automaticUpdatePolicy": {
            "$ref": "AutomaticUpdatePolicy"
          },
          "onDeployUpdatePolicy": {
            "$ref": "OnDeployUpdatePolicy"
          },
          "buildServiceAccount": {
            "description": "A service account the user provides for use with Cloud Build. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.",
            "type": "string"
          },
          "satisfiesPzs": {
            "description": "Output only.",
            "readOnly": true,
            "type": "boolean"
          },
          "satisfiesPzi": {
            "description": "Output only.",
            "readOnly": true,
            "type": "boolean"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.patch",
      "resource": "projects.locations.functions",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates existing function.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "updateMask": {
          "description": "Required. The list of fields in `CloudFunction` that have to be updated.",
          "location": "query",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "body_schema_ref": "CloudFunction",
      "body_schema": {
        "id": "CloudFunction",
        "description": "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations.",
        "type": "object",
        "properties": {
          "name": {
            "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
            "type": "string"
          },
          "description": {
            "description": "User-provided description of a function.",
            "type": "string"
          },
          "sourceArchiveUrl": {
            "description": "The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.",
            "type": "string"
          },
          "sourceRepository": {
            "description": "**Beta Feature** The source repository where a function is hosted.",
            "$ref": "SourceRepository"
          },
          "sourceUploadUrl": {
            "description": "The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)",
            "type": "string"
          },
          "httpsTrigger": {
            "description": "An HTTPS endpoint type of source that can be triggered via URL.",
            "$ref": "HttpsTrigger"
          },
          "eventTrigger": {
            "description": "A source that fires events in response to a condition in another service.",
            "$ref": "EventTrigger"
          },
          "status": {
            "description": "Output only. Status of the function deployment.",
            "readOnly": true,
            "type": "string",
            "enumDescriptions": [
              "Not specified. Invalid state.",
              "Function has been successfully deployed and is serving.",
              "Function deployment failed and the function isn\u2019t serving.",
              "Function is being created or updated.",
              "Function is being deleted.",
              "Function deployment failed and the function serving state is undefined. The function should be updated or deleted to move it out of this state."
            ],
            "enum": [
              "CLOUD_FUNCTION_STATUS_UNSPECIFIED",
              "ACTIVE",
              "OFFLINE",
              "DEPLOY_IN_PROGRESS",
              "DELETE_IN_PROGRESS",
              "UNKNOWN"
            ]
          },
          "entryPoint": {
            "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.",
            "type": "string"
          },
          "runtime": {
            "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).",
            "type": "string"
          },
          "timeout": {
            "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
            "type": "string",
            "format": "google-duration"
          },
          "availableMemoryMb": {
            "description": "The amount of memory in MB available for a function. Defaults to 256MB.",
            "type": "integer",
            "format": "int32"
          },
          "serviceAccountEmail": {
            "description": "The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last update timestamp of a Cloud Function.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "versionId": {
            "description": "Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.",
            "readOnly": true,
            "type": "string",
            "format": "int64"
          },
          "labels": {
            "description": "Labels associated with this Cloud Function.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "environmentVariables": {
            "description": "Environment variables that shall be available during function execution.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "buildEnvironmentVariables": {
            "description": "Build environment variables that shall be available during build time.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "network": {
            "description": "Deprecated: use vpc_connector",
            "deprecated": true,
            "type": "string"
          },
          "maxInstances": {
            "description": "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.",
            "type": "integer",
            "format": "int32"
          },
          "minInstances": {
            "description": "A lower bound for the number function instances that may coexist at a given time.",
            "type": "integer",
            "format": "int32"
          },
          "vpcConnector": {
            "description": "The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.",
            "type": "string"
          },
          "vpcConnectorEgressSettings": {
            "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Use the VPC Access Connector only for private IP space from RFC1918.",
              "Force the use of VPC Access Connector for all egress traffic from the function."
            ],
            "enum": [
              "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",
              "PRIVATE_RANGES_ONLY",
              "ALL_TRAFFIC"
            ]
          },
          "ingressSettings": {
            "description": "The ingress settings for the function, controlling what traffic can reach it.",
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Allow HTTP traffic from public and private sources.",
              "Allow HTTP traffic from only private VPC sources.",
              "Allow HTTP traffic from private VPC sources and through GCLB."
            ],
            "enum": [
              "INGRESS_SETTINGS_UNSPECIFIED",
              "ALLOW_ALL",
              "ALLOW_INTERNAL_ONLY",
              "ALLOW_INTERNAL_AND_GCLB"
            ]
          },
          "kmsKeyName": {
            "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.",
            "type": "string"
          },
          "buildWorkerPool": {
            "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.",
            "type": "string"
          },
          "buildId": {
            "description": "Output only. The Cloud Build ID of the latest successful deployment of the function.",
            "readOnly": true,
            "type": "string"
          },
          "buildName": {
            "description": "Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.",
            "readOnly": true,
            "type": "string"
          },
          "secretEnvironmentVariables": {
            "description": "Secret environment variables configuration.",
            "type": "array",
            "items": {
              "$ref": "SecretEnvVar"
            }
          },
          "secretVolumes": {
            "description": "Secret volumes configuration.",
            "type": "array",
            "items": {
              "$ref": "SecretVolume"
            }
          },
          "sourceToken": {
            "description": "Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
            "type": "string"
          },
          "dockerRepository": {
            "description": "User-managed repository created in Artifact Registry to which the function's Docker image will be pushed after it is built by Cloud Build. May optionally be encrypted with a customer-managed encryption key (CMEK). If unspecified and `docker_registry` is not explicitly set to `CONTAINER_REGISTRY`, GCF will create and use a default Artifact Registry repository named 'gcf-artifacts' in the region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
            "type": "string"
          },
          "dockerRegistry": {
            "description": "Docker Registry to use for this deployment. Deprecated: as of March 2025, `CONTAINER_REGISTRY` option is no longer available in response to Container Registry's deprecation: https://cloud.google.com/artifact-registry/docs/transition/transition-from-gcr Please use Artifact Registry instead, which is the default choice. If unspecified, it defaults to `ARTIFACT_REGISTRY`. If `docker_repository` field is specified, this field should either be left unspecified or set to `ARTIFACT_REGISTRY`.",
            "deprecated": true,
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Docker images will be stored in multi-regional Container Registry repositories named `gcf`.",
              "Docker images will be stored in regional Artifact Registry repositories. By default, GCF will create and use repositories named `gcf-artifacts` in every region in which a function is deployed. But the repository to use can also be specified by the user using the `docker_repository` field."
            ],
            "enum": [
              "DOCKER_REGISTRY_UNSPECIFIED",
              "CONTAINER_REGISTRY",
              "ARTIFACT_REGISTRY"
            ]
          },
          "automaticUpdatePolicy": {
            "$ref": "AutomaticUpdatePolicy"
          },
          "onDeployUpdatePolicy": {
            "$ref": "OnDeployUpdatePolicy"
          },
          "buildServiceAccount": {
            "description": "A service account the user provides for use with Cloud Build. The format of this field is `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.",
            "type": "string"
          },
          "satisfiesPzs": {
            "description": "Output only.",
            "readOnly": true,
            "type": "boolean"
          },
          "satisfiesPzi": {
            "description": "Output only.",
            "readOnly": true,
            "type": "boolean"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.delete",
      "resource": "projects.locations.functions",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The name of the function which should be deleted.",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.call",
      "resource": "projects.locations.functions",
      "action": "call",
      "http_method": "POST",
      "path_template": "v1/{+name}:call",
      "description": "Synchronously invokes a deployed Cloud Function. To be used for testing purposes as very limited traffic is allowed. For more information on the actual limits, refer to [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The name of the function to be called.",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "CallFunctionRequest",
      "body_schema": {
        "id": "CallFunctionRequest",
        "description": "Request for the `CallFunction` method.",
        "type": "object",
        "properties": {
          "data": {
            "description": "Required. Input to be passed to the function.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "CallFunctionResponse"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.generateUploadUrl",
      "resource": "projects.locations.functions",
      "action": "generateUploadUrl",
      "http_method": "POST",
      "path_template": "v1/{+parent}/functions:generateUploadUrl",
      "description": "Returns a signed URL for uploading a function source code. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls. Once the function source code upload is complete, the used signed URL should be provided in CreateFunction or UpdateFunction request as a reference to the function source code. When uploading source code to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 100MB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type: application/zip` * `x-goog-content-length-range: 0,104857600` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "The project and location in which the Google Cloud Storage signed URL should be generated, specified in the format `projects/*/locations/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GenerateUploadUrlRequest",
      "body_schema": {
        "id": "GenerateUploadUrlRequest",
        "description": "Request of `GenerateSourceUploadUrl` method.",
        "type": "object",
        "properties": {
          "kmsKeyName": {
            "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function source code objects in intermediate Cloud Storage buckets. When you generate an upload url and upload your source code, it gets copied to an intermediate Cloud Storage bucket. The source code is then copied to a versioned directory in the sources bucket in the consumer project during the function deployment. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. The Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). GCF will delegate access to the Google Storage service account in the internal project.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "GenerateUploadUrlResponse"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.generateDownloadUrl",
      "resource": "projects.locations.functions",
      "action": "generateDownloadUrl",
      "http_method": "POST",
      "path_template": "v1/{+name}:generateDownloadUrl",
      "description": "Returns a signed URL for downloading deployed function source code. The URL is only valid for a limited period and should be used within minutes after generation. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of function for which source code Google Cloud Storage signed URL should be generated.",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "GenerateDownloadUrlRequest",
      "body_schema": {
        "id": "GenerateDownloadUrlRequest",
        "description": "Request of `GenerateDownloadUrl` method.",
        "type": "object",
        "properties": {
          "versionId": {
            "description": "The optional version of function. If not set, default, current version is used.",
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "GenerateDownloadUrlResponse"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.setIamPolicy",
      "resource": "projects.locations.functions",
      "action": "setIamPolicy",
      "http_method": "POST",
      "path_template": "v1/{+resource}:setIamPolicy",
      "description": "Sets the IAM access control policy on the specified function. Replaces any existing policy.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "SetIamPolicyRequest",
      "body_schema": {
        "id": "SetIamPolicyRequest",
        "description": "Request message for `SetIamPolicy` method.",
        "type": "object",
        "properties": {
          "policy": {
            "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
            "$ref": "Policy"
          },
          "updateMask": {
            "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
            "type": "string",
            "format": "google-fieldmask"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Policy"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.getIamPolicy",
      "resource": "projects.locations.functions",
      "action": "getIamPolicy",
      "http_method": "GET",
      "path_template": "v1/{+resource}:getIamPolicy",
      "description": "Gets the IAM access control policy for a function. Returns an empty policy if the function exists and does not have a policy set.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "options.requestedPolicyVersion": {
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "location": "query",
          "type": "integer",
          "format": "int32"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Policy"
    },
    {
      "operation_id": "cloudfunctions.projects.locations.functions.testIamPermissions",
      "resource": "projects.locations.functions",
      "action": "testIamPermissions",
      "http_method": "POST",
      "path_template": "v1/{+resource}:testIamPermissions",
      "description": "Tests the specified permissions against the IAM access control policy for a function. If the function does not exist, this will return an empty set of permissions, not a NOT_FOUND error.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/locations/[^/]+/functions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "TestIamPermissionsRequest",
      "body_schema": {
        "id": "TestIamPermissionsRequest",
        "description": "Request message for `TestIamPermissions` method.",
        "type": "object",
        "properties": {
          "permissions": {
            "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "TestIamPermissionsResponse"
    }
  ]
}