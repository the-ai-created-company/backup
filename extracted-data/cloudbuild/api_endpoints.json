{
  "service": "cloudbuild",
  "version": "v1",
  "base_url": "https://cloudbuild.googleapis.com/",
  "total_endpoints": 65,
  "endpoints": [
    {
      "operation_id": "cloudbuild.operations.cancel",
      "resource": "operations",
      "action": "cancel",
      "http_method": "POST",
      "path_template": "v1/{+name}:cancel",
      "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of the operation resource to be cancelled.",
          "required": true,
          "type": "string",
          "location": "path",
          "pattern": "^operations/.*$"
        }
      },
      "body_schema_ref": "CancelOperationRequest",
      "body_schema": {
        "type": "object",
        "properties": {},
        "id": "CancelOperationRequest",
        "description": "The request message for Operations.CancelOperation."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.operations.get",
      "resource": "operations",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "pattern": "^operations/.*$",
          "description": "The name of the operation resource.",
          "location": "path",
          "type": "string",
          "required": true
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.githubDotComWebhook.receive",
      "resource": "githubDotComWebhook",
      "action": "receive",
      "http_method": "POST",
      "path_template": "v1/githubDotComWebhook:receive",
      "description": "ReceiveGitHubDotComWebhook is called when the API receives a github.com webhook.",
      "required_params": [],
      "parameters": {
        "webhookKey": {
          "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
          "type": "string",
          "location": "query"
        }
      },
      "body_schema_ref": "HttpBody",
      "body_schema": {
        "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
        "id": "HttpBody",
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The HTTP Content-Type header value specifying the content type of the body."
          },
          "extensions": {
            "type": "array",
            "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
            "items": {
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            }
          },
          "data": {
            "format": "byte",
            "description": "The HTTP request/response body as raw binary.",
            "type": "string"
          }
        }
      },
      "scopes_required": [],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.projects.triggers.create",
      "resource": "projects.triggers",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/projects/{projectId}/triggers",
      "description": "Creates a new `BuildTrigger`.",
      "required_params": [
        "projectId"
      ],
      "parameters": {
        "projectId": {
          "location": "path",
          "required": true,
          "type": "string",
          "description": "Required. ID of the project for which to configure automatic builds."
        },
        "parent": {
          "type": "string",
          "location": "query",
          "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`"
        }
      },
      "body_schema_ref": "BuildTrigger",
      "body_schema": {
        "description": "Configuration for an automated build in response to source repository changes.",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. Unique identifier of the trigger."
          },
          "webhookConfig": {
            "$ref": "WebhookConfig",
            "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
          },
          "bitbucketServerTriggerConfig": {
            "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
            "$ref": "BitbucketServerTriggerConfig"
          },
          "gitFileSource": {
            "description": "The file source describing the local or remote Build template.",
            "$ref": "GitFileSource"
          },
          "disabled": {
            "type": "boolean",
            "description": "If true, the trigger will never automatically execute a build."
          },
          "gitlabEnterpriseEventsConfig": {
            "description": "GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.",
            "$ref": "GitLabEventsConfig"
          },
          "name": {
            "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
            "type": "string"
          },
          "github": {
            "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
            "$ref": "GitHubEventsConfig"
          },
          "createTime": {
            "type": "string",
            "description": "Output only. Time when the trigger was created.",
            "format": "google-datetime",
            "readOnly": true
          },
          "includeBuildLogs": {
            "enum": [
              "INCLUDE_BUILD_LOGS_UNSPECIFIED",
              "INCLUDE_BUILD_LOGS_WITH_STATUS"
            ],
            "description": "If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.",
            "type": "string",
            "enumDescriptions": [
              "Build logs will not be shown on GitHub.",
              "Build logs will be shown on GitHub."
            ]
          },
          "developerConnectEventConfig": {
            "description": "Optional. The configuration of a trigger that creates a build whenever an event from the DeveloperConnect API is received.",
            "$ref": "DeveloperConnectEventConfig"
          },
          "substitutions": {
            "type": "object",
            "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "eventType": {
            "description": "EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.",
            "type": "string",
            "enum": [
              "EVENT_TYPE_UNSPECIFIED",
              "REPO",
              "WEBHOOK",
              "PUBSUB",
              "MANUAL"
            ],
            "enumDescriptions": [
              "EVENT_TYPE_UNSPECIFIED event_types are ignored.",
              "REPO corresponds to the supported VCS integrations.",
              "WEBHOOK corresponds to webhook triggers.",
              "PUBSUB corresponds to pubsub triggers.",
              "MANUAL corresponds to manual-only invoked triggers."
            ]
          },
          "includedFiles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build."
          },
          "ignoredFiles": {
            "type": "array",
            "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
            "items": {
              "type": "string"
            }
          },
          "resourceName": {
            "type": "string",
            "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
          },
          "build": {
            "$ref": "Build",
            "description": "Contents of the build template."
          },
          "approvalConfig": {
            "description": "Configuration for manual approval to start a build invocation of this BuildTrigger.",
            "$ref": "ApprovalConfig"
          },
          "serviceAccount": {
            "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set and the legacy Cloud Build service account ([PROJECT_NUM]@cloudbuild.gserviceaccount.com) is the default for the project then it will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`",
            "type": "string"
          },
          "description": {
            "description": "Human-readable description of this trigger.",
            "type": "string"
          },
          "filename": {
            "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).",
            "type": "string"
          },
          "pubsubConfig": {
            "$ref": "PubsubConfig",
            "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
          },
          "triggerTemplate": {
            "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
            "$ref": "RepoSource"
          },
          "autodetect": {
            "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
            "type": "boolean"
          },
          "filter": {
            "type": "string",
            "description": "A Common Expression Language string."
          },
          "repositoryEventConfig": {
            "$ref": "RepositoryEventConfig",
            "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "description": "Tags for annotation of a `BuildTrigger`",
            "type": "array"
          },
          "sourceToBuild": {
            "$ref": "GitRepoSource",
            "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
          }
        },
        "id": "BuildTrigger"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "BuildTrigger"
    },
    {
      "operation_id": "cloudbuild.projects.triggers.list",
      "resource": "projects.triggers",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/projects/{projectId}/triggers",
      "description": "Lists existing `BuildTrigger`s.",
      "required_params": [
        "projectId"
      ],
      "parameters": {
        "parent": {
          "location": "query",
          "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`",
          "type": "string"
        },
        "pageToken": {
          "location": "query",
          "type": "string",
          "description": "Token to provide to skip to a particular spot in the list."
        },
        "pageSize": {
          "format": "int32",
          "description": "Number of results to return in the list.",
          "type": "integer",
          "location": "query"
        },
        "projectId": {
          "location": "path",
          "required": true,
          "type": "string",
          "description": "Required. ID of the project for which to list BuildTriggers."
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListBuildTriggersResponse"
    },
    {
      "operation_id": "cloudbuild.projects.triggers.patch",
      "resource": "projects.triggers",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/projects/{projectId}/triggers/{triggerId}",
      "description": "Updates a `BuildTrigger` by its project ID and trigger ID.",
      "required_params": [
        "projectId",
        "triggerId"
      ],
      "parameters": {
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project that owns the trigger.",
          "required": true,
          "location": "path"
        },
        "updateMask": {
          "location": "query",
          "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "triggerId": {
          "description": "Required. ID of the `BuildTrigger` to update.",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "BuildTrigger",
      "body_schema": {
        "description": "Configuration for an automated build in response to source repository changes.",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. Unique identifier of the trigger."
          },
          "webhookConfig": {
            "$ref": "WebhookConfig",
            "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
          },
          "bitbucketServerTriggerConfig": {
            "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
            "$ref": "BitbucketServerTriggerConfig"
          },
          "gitFileSource": {
            "description": "The file source describing the local or remote Build template.",
            "$ref": "GitFileSource"
          },
          "disabled": {
            "type": "boolean",
            "description": "If true, the trigger will never automatically execute a build."
          },
          "gitlabEnterpriseEventsConfig": {
            "description": "GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.",
            "$ref": "GitLabEventsConfig"
          },
          "name": {
            "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
            "type": "string"
          },
          "github": {
            "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
            "$ref": "GitHubEventsConfig"
          },
          "createTime": {
            "type": "string",
            "description": "Output only. Time when the trigger was created.",
            "format": "google-datetime",
            "readOnly": true
          },
          "includeBuildLogs": {
            "enum": [
              "INCLUDE_BUILD_LOGS_UNSPECIFIED",
              "INCLUDE_BUILD_LOGS_WITH_STATUS"
            ],
            "description": "If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.",
            "type": "string",
            "enumDescriptions": [
              "Build logs will not be shown on GitHub.",
              "Build logs will be shown on GitHub."
            ]
          },
          "developerConnectEventConfig": {
            "description": "Optional. The configuration of a trigger that creates a build whenever an event from the DeveloperConnect API is received.",
            "$ref": "DeveloperConnectEventConfig"
          },
          "substitutions": {
            "type": "object",
            "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "eventType": {
            "description": "EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.",
            "type": "string",
            "enum": [
              "EVENT_TYPE_UNSPECIFIED",
              "REPO",
              "WEBHOOK",
              "PUBSUB",
              "MANUAL"
            ],
            "enumDescriptions": [
              "EVENT_TYPE_UNSPECIFIED event_types are ignored.",
              "REPO corresponds to the supported VCS integrations.",
              "WEBHOOK corresponds to webhook triggers.",
              "PUBSUB corresponds to pubsub triggers.",
              "MANUAL corresponds to manual-only invoked triggers."
            ]
          },
          "includedFiles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build."
          },
          "ignoredFiles": {
            "type": "array",
            "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
            "items": {
              "type": "string"
            }
          },
          "resourceName": {
            "type": "string",
            "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
          },
          "build": {
            "$ref": "Build",
            "description": "Contents of the build template."
          },
          "approvalConfig": {
            "description": "Configuration for manual approval to start a build invocation of this BuildTrigger.",
            "$ref": "ApprovalConfig"
          },
          "serviceAccount": {
            "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set and the legacy Cloud Build service account ([PROJECT_NUM]@cloudbuild.gserviceaccount.com) is the default for the project then it will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`",
            "type": "string"
          },
          "description": {
            "description": "Human-readable description of this trigger.",
            "type": "string"
          },
          "filename": {
            "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).",
            "type": "string"
          },
          "pubsubConfig": {
            "$ref": "PubsubConfig",
            "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
          },
          "triggerTemplate": {
            "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
            "$ref": "RepoSource"
          },
          "autodetect": {
            "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
            "type": "boolean"
          },
          "filter": {
            "type": "string",
            "description": "A Common Expression Language string."
          },
          "repositoryEventConfig": {
            "$ref": "RepositoryEventConfig",
            "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "description": "Tags for annotation of a `BuildTrigger`",
            "type": "array"
          },
          "sourceToBuild": {
            "$ref": "GitRepoSource",
            "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
          }
        },
        "id": "BuildTrigger"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "BuildTrigger"
    },
    {
      "operation_id": "cloudbuild.projects.triggers.get",
      "resource": "projects.triggers",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/projects/{projectId}/triggers/{triggerId}",
      "description": "Returns information about a `BuildTrigger`.",
      "required_params": [
        "triggerId",
        "projectId"
      ],
      "parameters": {
        "triggerId": {
          "required": true,
          "location": "path",
          "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.",
          "type": "string"
        },
        "name": {
          "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
          "type": "string",
          "location": "query"
        },
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project that owns the trigger.",
          "required": true,
          "location": "path"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "BuildTrigger"
    },
    {
      "operation_id": "cloudbuild.projects.triggers.delete",
      "resource": "projects.triggers",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/projects/{projectId}/triggers/{triggerId}",
      "description": "Deletes a `BuildTrigger` by its project ID and trigger ID.",
      "required_params": [
        "projectId",
        "triggerId"
      ],
      "parameters": {
        "projectId": {
          "description": "Required. ID of the project that owns the trigger.",
          "location": "path",
          "type": "string",
          "required": true
        },
        "name": {
          "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
          "location": "query",
          "type": "string"
        },
        "triggerId": {
          "required": true,
          "type": "string",
          "description": "Required. ID of the `BuildTrigger` to delete.",
          "location": "path"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.projects.triggers.webhook",
      "resource": "projects.triggers",
      "action": "webhook",
      "http_method": "POST",
      "path_template": "v1/projects/{projectId}/triggers/{trigger}:webhook",
      "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
      "required_params": [
        "projectId",
        "trigger"
      ],
      "parameters": {
        "projectId": {
          "location": "path",
          "type": "string",
          "description": "Project in which the specified trigger lives",
          "required": true
        },
        "trigger": {
          "type": "string",
          "required": true,
          "description": "Name of the trigger to run the payload against",
          "location": "path"
        },
        "name": {
          "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
          "type": "string",
          "location": "query"
        },
        "secret": {
          "location": "query",
          "description": "Secret token used for authorization if an OAuth token isn't provided.",
          "type": "string"
        }
      },
      "body_schema_ref": "HttpBody",
      "body_schema": {
        "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
        "id": "HttpBody",
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The HTTP Content-Type header value specifying the content type of the body."
          },
          "extensions": {
            "type": "array",
            "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
            "items": {
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            }
          },
          "data": {
            "format": "byte",
            "description": "The HTTP request/response body as raw binary.",
            "type": "string"
          }
        }
      },
      "scopes_required": [],
      "response_type": "ReceiveTriggerWebhookResponse"
    },
    {
      "operation_id": "cloudbuild.projects.triggers.run",
      "resource": "projects.triggers",
      "action": "run",
      "http_method": "POST",
      "path_template": "v1/projects/{projectId}/triggers/{triggerId}:run",
      "description": "Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.",
      "required_params": [
        "triggerId",
        "projectId"
      ],
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
          "location": "query"
        },
        "triggerId": {
          "required": true,
          "location": "path",
          "type": "string",
          "description": "Required. ID of the trigger."
        },
        "projectId": {
          "required": true,
          "location": "path",
          "description": "Required. ID of the project.",
          "type": "string"
        }
      },
      "body_schema_ref": "RepoSource",
      "body_schema": {
        "description": "Location of the source in a Google Cloud Source Repository.",
        "properties": {
          "substitutions": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
            "type": "object"
          },
          "commitSha": {
            "description": "Explicit commit SHA to build.",
            "type": "string"
          },
          "projectId": {
            "description": "Optional. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
            "type": "string"
          },
          "repoName": {
            "description": "Required. Name of the Cloud Source Repository.",
            "type": "string"
          },
          "dir": {
            "type": "string",
            "description": "Optional. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
          },
          "branchName": {
            "type": "string",
            "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
          },
          "tagName": {
            "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
            "type": "string"
          },
          "invertRegex": {
            "description": "Optional. Only trigger a build if the revision regex does NOT match the revision regex.",
            "type": "boolean"
          }
        },
        "type": "object",
        "id": "RepoSource"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.githubEnterpriseConfigs.create",
      "resource": "projects.githubEnterpriseConfigs",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/githubEnterpriseConfigs",
      "description": "Create an association between a GCP project and a GitHub Enterprise server.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "location": "path",
          "pattern": "^projects/[^/]+$",
          "type": "string",
          "required": true,
          "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}"
        },
        "projectId": {
          "deprecated": true,
          "type": "string",
          "location": "query",
          "description": "ID of the project."
        },
        "gheConfigId": {
          "location": "query",
          "type": "string",
          "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character"
        }
      },
      "body_schema_ref": "GitHubEnterpriseConfig",
      "body_schema": {
        "id": "GitHubEnterpriseConfig",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Optional. Name to display for this config."
          },
          "webhookKey": {
            "type": "string",
            "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
          },
          "hostUrl": {
            "type": "string",
            "description": "The URL of the github enterprise host the configuration is for."
          },
          "appId": {
            "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
            "type": "string",
            "format": "int64"
          },
          "sslCa": {
            "description": "Optional. SSL certificate to use for requests to GitHub Enterprise.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. Time when the installation was associated with the project.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "peeredNetwork": {
            "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
            "type": "string"
          },
          "secrets": {
            "$ref": "GitHubEnterpriseSecrets",
            "description": "Optional. Names of secrets in Secret Manager."
          },
          "name": {
            "type": "string",
            "description": "The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
          }
        },
        "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
        "type": "object"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.githubEnterpriseConfigs.list",
      "resource": "projects.githubEnterpriseConfigs",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/githubEnterpriseConfigs",
      "description": "List all GitHubEnterpriseConfigs for a given project.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "projectId": {
          "description": "ID of the project",
          "location": "query",
          "deprecated": true,
          "type": "string"
        },
        "parent": {
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "type": "string",
          "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
          "required": true
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListGithubEnterpriseConfigsResponse"
    },
    {
      "operation_id": "cloudbuild.projects.githubEnterpriseConfigs.get",
      "resource": "projects.githubEnterpriseConfigs",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Retrieve a GitHubEnterpriseConfig.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "projectId": {
          "type": "string",
          "deprecated": true,
          "location": "query",
          "description": "ID of the project"
        },
        "name": {
          "type": "string",
          "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
          "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "location": "path",
          "required": true
        },
        "configId": {
          "description": "Unique identifier of the `GitHubEnterpriseConfig`",
          "location": "query",
          "deprecated": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "GitHubEnterpriseConfig"
    },
    {
      "operation_id": "cloudbuild.projects.githubEnterpriseConfigs.patch",
      "resource": "projects.githubEnterpriseConfigs",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Update an association between a GCP project and a GitHub Enterprise server.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "updateMask": {
          "format": "google-fieldmask",
          "location": "query",
          "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
          "type": "string"
        },
        "name": {
          "description": "The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
          "type": "string",
          "location": "path",
          "required": true
        }
      },
      "body_schema_ref": "GitHubEnterpriseConfig",
      "body_schema": {
        "id": "GitHubEnterpriseConfig",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Optional. Name to display for this config."
          },
          "webhookKey": {
            "type": "string",
            "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
          },
          "hostUrl": {
            "type": "string",
            "description": "The URL of the github enterprise host the configuration is for."
          },
          "appId": {
            "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
            "type": "string",
            "format": "int64"
          },
          "sslCa": {
            "description": "Optional. SSL certificate to use for requests to GitHub Enterprise.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. Time when the installation was associated with the project.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "peeredNetwork": {
            "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
            "type": "string"
          },
          "secrets": {
            "$ref": "GitHubEnterpriseSecrets",
            "description": "Optional. Names of secrets in Secret Manager."
          },
          "name": {
            "type": "string",
            "description": "The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
          }
        },
        "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
        "type": "object"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.githubEnterpriseConfigs.delete",
      "resource": "projects.githubEnterpriseConfigs",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "projectId": {
          "type": "string",
          "deprecated": true,
          "description": "ID of the project",
          "location": "query"
        },
        "configId": {
          "deprecated": true,
          "location": "query",
          "description": "Unique identifier of the `GitHubEnterpriseConfig`",
          "type": "string"
        },
        "name": {
          "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "required": true,
          "type": "string",
          "pattern": "^projects/[^/]+/githubEnterpriseConfigs/[^/]+$",
          "location": "path"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.builds.cancel",
      "resource": "projects.builds",
      "action": "cancel",
      "http_method": "POST",
      "path_template": "v1/projects/{projectId}/builds/{id}:cancel",
      "description": "Cancels a build in progress.",
      "required_params": [
        "projectId",
        "id"
      ],
      "parameters": {
        "projectId": {
          "type": "string",
          "location": "path",
          "description": "Required. ID of the project.",
          "required": true
        },
        "id": {
          "required": true,
          "location": "path",
          "type": "string",
          "description": "Required. ID of the build."
        }
      },
      "body_schema_ref": "CancelBuildRequest",
      "body_schema": {
        "id": "CancelBuildRequest",
        "description": "Request to cancel an ongoing build.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Required. ID of the build."
          },
          "name": {
            "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "description": "Required. ID of the project."
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Build"
    },
    {
      "operation_id": "cloudbuild.projects.builds.approve",
      "resource": "projects.builds",
      "action": "approve",
      "http_method": "POST",
      "path_template": "v1/{+name}:approve",
      "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "required": true,
          "location": "path",
          "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
          "type": "string",
          "pattern": "^projects/[^/]+/builds/[^/]+$"
        }
      },
      "body_schema_ref": "ApproveBuildRequest",
      "body_schema": {
        "type": "object",
        "properties": {
          "approvalResult": {
            "description": "Approval decision and metadata.",
            "$ref": "ApprovalResult"
          }
        },
        "id": "ApproveBuildRequest",
        "description": "Request to approve or reject a pending build."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.builds.get",
      "resource": "projects.builds",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/projects/{projectId}/builds/{id}",
      "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
      "required_params": [
        "projectId",
        "id"
      ],
      "parameters": {
        "name": {
          "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
          "type": "string",
          "location": "query"
        },
        "projectId": {
          "required": true,
          "type": "string",
          "description": "Required. ID of the project.",
          "location": "path"
        },
        "id": {
          "type": "string",
          "description": "Required. ID of the build.",
          "location": "path",
          "required": true
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Build"
    },
    {
      "operation_id": "cloudbuild.projects.builds.list",
      "resource": "projects.builds",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/projects/{projectId}/builds",
      "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
      "required_params": [
        "projectId"
      ],
      "parameters": {
        "pageToken": {
          "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
          "type": "string",
          "location": "query"
        },
        "filter": {
          "description": "The raw filter text to constrain the results.",
          "location": "query",
          "type": "string"
        },
        "projectId": {
          "location": "path",
          "type": "string",
          "required": true,
          "description": "Required. ID of the project."
        },
        "pageSize": {
          "format": "int32",
          "location": "query",
          "description": "Number of results to return in the list.",
          "type": "integer"
        },
        "parent": {
          "type": "string",
          "location": "query",
          "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListBuildsResponse"
    },
    {
      "operation_id": "cloudbuild.projects.builds.create",
      "resource": "projects.builds",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/projects/{projectId}/builds",
      "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
      "required_params": [
        "projectId"
      ],
      "parameters": {
        "parent": {
          "type": "string",
          "location": "query",
          "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
        },
        "projectId": {
          "required": true,
          "description": "Required. ID of the project.",
          "location": "path",
          "type": "string"
        }
      },
      "body_schema_ref": "Build",
      "body_schema": {
        "id": "Build",
        "type": "object",
        "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
        "properties": {
          "createTime": {
            "type": "string",
            "readOnly": true,
            "description": "Output only. Time at which the request to create the build was received.",
            "format": "google-datetime"
          },
          "approval": {
            "description": "Output only. Describes this build's approval configuration, status, and result.",
            "$ref": "BuildApproval",
            "readOnly": true
          },
          "source": {
            "$ref": "Source",
            "description": "Optional. The location of the source files to build."
          },
          "startTime": {
            "type": "string",
            "readOnly": true,
            "format": "google-datetime",
            "description": "Output only. Time at which execution of the build was started."
          },
          "dependencies": {
            "items": {
              "$ref": "Dependency"
            },
            "type": "array",
            "description": "Optional. Dependencies that the Cloud Build worker will fetch before executing user steps."
          },
          "gitConfig": {
            "$ref": "GitConfig",
            "description": "Optional. Configuration for git operations."
          },
          "substitutions": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "Substitutions data for `Build` resource."
          },
          "status": {
            "readOnly": true,
            "enumDescriptions": [
              "Status of the build is unknown.",
              "Build has been created and is pending execution and queuing. It has not been queued.",
              "Build or step is queued; work has not yet begun.",
              "Build or step is being executed.",
              "Build or step finished successfully.",
              "Build or step failed to complete successfully.",
              "Build or step failed due to an internal cause.",
              "Build or step took longer than was allowed.",
              "Build or step was canceled by a user.",
              "Build was enqueued for longer than the value of `queue_ttl`."
            ],
            "enum": [
              "STATUS_UNKNOWN",
              "PENDING",
              "QUEUED",
              "WORKING",
              "SUCCESS",
              "FAILURE",
              "INTERNAL_ERROR",
              "TIMEOUT",
              "CANCELLED",
              "EXPIRED"
            ],
            "type": "string",
            "description": "Output only. Status of the build."
          },
          "timing": {
            "additionalProperties": {
              "$ref": "TimeSpan"
            },
            "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
            "readOnly": true,
            "type": "object"
          },
          "options": {
            "description": "Special options for this build.",
            "$ref": "BuildOptions"
          },
          "availableSecrets": {
            "$ref": "Secrets",
            "description": "Secrets and secret environment variables."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for annotation of a `Build`. These are not docker tags."
          },
          "sourceProvenance": {
            "description": "Output only. A permanent fixed identifier for source.",
            "readOnly": true,
            "$ref": "SourceProvenance"
          },
          "steps": {
            "description": "Required. The operations to be performed on the workspace.",
            "type": "array",
            "items": {
              "$ref": "BuildStep"
            }
          },
          "buildTriggerId": {
            "readOnly": true,
            "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
            "type": "string"
          },
          "finishTime": {
            "readOnly": true,
            "format": "google-datetime",
            "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "description": "Output only. Unique identifier of the build.",
            "type": "string"
          },
          "statusDetail": {
            "description": "Output only. Customer-readable message about the current status.",
            "readOnly": true,
            "type": "string"
          },
          "results": {
            "description": "Output only. Results of the build.",
            "readOnly": true,
            "$ref": "Results"
          },
          "secrets": {
            "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
            "items": {
              "$ref": "Secret"
            },
            "type": "array"
          },
          "failureInfo": {
            "description": "Output only. Contains information about the build when status=FAILURE.",
            "readOnly": true,
            "$ref": "FailureInfo"
          },
          "name": {
            "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
            "type": "string",
            "readOnly": true
          },
          "warnings": {
            "readOnly": true,
            "type": "array",
            "description": "Output only. Non-fatal problems encountered during the execution of the build.",
            "items": {
              "$ref": "Warning"
            }
          },
          "serviceAccount": {
            "type": "string",
            "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. "
          },
          "logsBucket": {
            "description": "Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
            "type": "string"
          },
          "artifacts": {
            "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
            "$ref": "Artifacts"
          },
          "timeout": {
            "type": "string",
            "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.",
            "format": "google-duration"
          },
          "images": {
            "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "queueTtl": {
            "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
            "type": "string",
            "format": "google-duration"
          },
          "logUrl": {
            "type": "string",
            "description": "Output only. URL to logs for this build in Google Cloud Console.",
            "readOnly": true
          },
          "projectId": {
            "readOnly": true,
            "description": "Output only. ID of the project.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.builds.retry",
      "resource": "projects.builds",
      "action": "retry",
      "http_method": "POST",
      "path_template": "v1/projects/{projectId}/builds/{id}:retry",
      "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
      "required_params": [
        "projectId",
        "id"
      ],
      "parameters": {
        "projectId": {
          "location": "path",
          "type": "string",
          "description": "Required. ID of the project.",
          "required": true
        },
        "id": {
          "type": "string",
          "description": "Required. Build ID of the original build.",
          "required": true,
          "location": "path"
        }
      },
      "body_schema_ref": "RetryBuildRequest",
      "body_schema": {
        "type": "object",
        "id": "RetryBuildRequest",
        "description": "Specifies a build to retry.",
        "properties": {
          "name": {
            "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
            "type": "string"
          },
          "projectId": {
            "description": "Required. ID of the project.",
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Required. Build ID of the original build."
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.getDefaultServiceAccount",
      "resource": "projects.locations",
      "action": "getDefaultServiceAccount",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Returns the `DefaultServiceAccount` used by the project.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "pattern": "^projects/[^/]+/locations/[^/]+/defaultServiceAccount$",
          "required": true,
          "location": "path",
          "description": "Required. The name of the `DefaultServiceAccount` to retrieve. Format: `projects/{project}/locations/{location}/defaultServiceAccount`",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "DefaultServiceAccount"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.get",
      "resource": "projects.locations.gitLabConfigs",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Retrieves a `GitLabConfig`. This API is experimental",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "location": "path",
          "required": true,
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
          "description": "Required. The config resource name."
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "GitLabConfig"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.create",
      "resource": "projects.locations.gitLabConfigs",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/gitLabConfigs",
      "description": "Creates a new `GitLabConfig`. This API is experimental",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "required": true,
          "location": "path",
          "description": "Required. Name of the parent resource.",
          "type": "string"
        },
        "gitlabConfigId": {
          "type": "string",
          "description": "Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig\u2019s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character",
          "location": "query"
        }
      },
      "body_schema_ref": "GitLabConfig",
      "body_schema": {
        "properties": {
          "name": {
            "description": "The resource name for the config.",
            "type": "string"
          },
          "connectedRepositories": {
            "items": {
              "$ref": "GitLabRepositoryId"
            },
            "description": "Connected GitLab.com or GitLabEnterprise repositories for this config.",
            "type": "array"
          },
          "username": {
            "type": "string",
            "description": "Username of the GitLab.com or GitLab Enterprise account Cloud Build will use."
          },
          "webhookKey": {
            "type": "string",
            "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.",
            "readOnly": true
          },
          "secrets": {
            "$ref": "GitLabSecrets",
            "description": "Required. Secret Manager secrets needed by the config."
          },
          "enterpriseConfig": {
            "$ref": "GitLabEnterpriseConfig",
            "description": "Optional. GitLabEnterprise config."
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. Time when the config was created.",
            "format": "google-datetime"
          }
        },
        "id": "GitLabConfig",
        "type": "object",
        "description": "GitLabConfig represents the configuration for a GitLab integration."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.delete",
      "resource": "projects.locations.gitLabConfigs",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Delete a `GitLabConfig`. This API is experimental",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "type": "string",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
          "description": "Required. The config resource name.",
          "location": "path"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository",
      "resource": "projects.locations.gitLabConfigs",
      "action": "removeGitLabConnectedRepository",
      "http_method": "POST",
      "path_template": "v1/{+config}:removeGitLabConnectedRepository",
      "description": "Remove a GitLab repository from a given GitLabConfig's connected repositories. This API is experimental.",
      "required_params": [
        "config"
      ],
      "parameters": {
        "config": {
          "required": true,
          "type": "string",
          "description": "Required. The name of the `GitLabConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
          "location": "path"
        }
      },
      "body_schema_ref": "RemoveGitLabConnectedRepositoryRequest",
      "body_schema": {
        "id": "RemoveGitLabConnectedRepositoryRequest",
        "type": "object",
        "description": "RPC request object accepted by RemoveGitLabConnectedRepository RPC method.",
        "properties": {
          "connectedRepository": {
            "$ref": "GitLabRepositoryId",
            "description": "The connected repository to remove."
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.list",
      "resource": "projects.locations.gitLabConfigs",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/gitLabConfigs",
      "description": "List all `GitLabConfigs` for a given project. This API is experimental",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "location": "query",
          "description": "The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000;, values above 1000 will be coerced to 1000."
        },
        "parent": {
          "location": "path",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "description": "Required. Name of the parent resource",
          "type": "string"
        },
        "pageToken": {
          "description": "A page token, received from a previous \u2018ListGitlabConfigsRequest\u2019 call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to \u2018ListGitlabConfigsRequest\u2019 must match the call that provided the page token.",
          "type": "string",
          "location": "query"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListGitLabConfigsResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.patch",
      "resource": "projects.locations.gitLabConfigs",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates an existing `GitLabConfig`. This API is experimental",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
          "type": "string",
          "required": true,
          "description": "The resource name for the config."
        },
        "updateMask": {
          "location": "query",
          "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "body_schema_ref": "GitLabConfig",
      "body_schema": {
        "properties": {
          "name": {
            "description": "The resource name for the config.",
            "type": "string"
          },
          "connectedRepositories": {
            "items": {
              "$ref": "GitLabRepositoryId"
            },
            "description": "Connected GitLab.com or GitLabEnterprise repositories for this config.",
            "type": "array"
          },
          "username": {
            "type": "string",
            "description": "Username of the GitLab.com or GitLab Enterprise account Cloud Build will use."
          },
          "webhookKey": {
            "type": "string",
            "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.",
            "readOnly": true
          },
          "secrets": {
            "$ref": "GitLabSecrets",
            "description": "Required. Secret Manager secrets needed by the config."
          },
          "enterpriseConfig": {
            "$ref": "GitLabEnterpriseConfig",
            "description": "Optional. GitLabEnterprise config."
          },
          "createTime": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. Time when the config was created.",
            "format": "google-datetime"
          }
        },
        "id": "GitLabConfig",
        "type": "object",
        "description": "GitLabConfig represents the configuration for a GitLab integration."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.repos.list",
      "resource": "projects.locations.gitLabConfigs.repos",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/repos",
      "description": "List all repositories for a given `GitLabConfig`. This API is experimental",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "pageSize": {
          "format": "int32",
          "location": "query",
          "description": "The maximum number of repositories to return. The service may return fewer than this value.",
          "type": "integer"
        },
        "parent": {
          "description": "Required. Name of the parent resource.",
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
          "required": true,
          "type": "string"
        },
        "pageToken": {
          "type": "string",
          "description": "A page token, received from a previous ListGitLabRepositoriesRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListGitLabRepositoriesRequest` must match the call that provided the page token.",
          "location": "query"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListGitLabRepositoriesResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.gitLabConfigs.connectedRepositories.batchCreate",
      "resource": "projects.locations.gitLabConfigs.connectedRepositories",
      "action": "batchCreate",
      "http_method": "POST",
      "path_template": "v1/{+parent}/connectedRepositories:batchCreate",
      "description": "Batch connecting GitLab repositories to Cloud Build. This API is experimental.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/gitLabConfigs/[^/]+$",
          "type": "string",
          "description": "The name of the `GitLabConfig` that adds connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`",
          "required": true
        }
      },
      "body_schema_ref": "BatchCreateGitLabConnectedRepositoriesRequest",
      "body_schema": {
        "description": "RPC request object accepted by BatchCreateGitLabConnectedRepositories RPC method.",
        "type": "object",
        "id": "BatchCreateGitLabConnectedRepositoriesRequest",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "CreateGitLabConnectedRepositoryRequest"
            },
            "description": "Required. Requests to connect GitLab repositories."
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.operations.cancel",
      "resource": "projects.locations.operations",
      "action": "cancel",
      "http_method": "POST",
      "path_template": "v1/{+name}:cancel",
      "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
          "required": true,
          "location": "path",
          "description": "The name of the operation resource to be cancelled.",
          "type": "string"
        }
      },
      "body_schema_ref": "CancelOperationRequest",
      "body_schema": {
        "type": "object",
        "properties": {},
        "id": "CancelOperationRequest",
        "description": "The request message for Operations.CancelOperation."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.projects.locations.operations.get",
      "resource": "projects.locations.operations",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The name of the operation resource.",
          "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
          "required": true,
          "location": "path",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.triggers.list",
      "resource": "projects.locations.triggers",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/triggers",
      "description": "Lists existing `BuildTrigger`s.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "location": "query",
          "description": "Number of results to return in the list."
        },
        "parent": {
          "location": "path",
          "type": "string",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "description": "The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`"
        },
        "pageToken": {
          "type": "string",
          "description": "Token to provide to skip to a particular spot in the list.",
          "location": "query"
        },
        "projectId": {
          "description": "Required. ID of the project for which to list BuildTriggers.",
          "type": "string",
          "location": "query"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListBuildTriggersResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.triggers.webhook",
      "resource": "projects.locations.triggers",
      "action": "webhook",
      "http_method": "POST",
      "path_template": "v1/{+name}:webhook",
      "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "projectId": {
          "location": "query",
          "type": "string",
          "description": "Project in which the specified trigger lives"
        },
        "trigger": {
          "type": "string",
          "location": "query",
          "description": "Name of the trigger to run the payload against"
        },
        "name": {
          "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
          "type": "string",
          "location": "path",
          "required": true,
          "description": "The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
        },
        "secret": {
          "location": "query",
          "description": "Secret token used for authorization if an OAuth token isn't provided.",
          "type": "string"
        }
      },
      "body_schema_ref": "HttpBody",
      "body_schema": {
        "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
        "id": "HttpBody",
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The HTTP Content-Type header value specifying the content type of the body."
          },
          "extensions": {
            "type": "array",
            "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
            "items": {
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            }
          },
          "data": {
            "format": "byte",
            "description": "The HTTP request/response body as raw binary.",
            "type": "string"
          }
        }
      },
      "scopes_required": [],
      "response_type": "ReceiveTriggerWebhookResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.triggers.create",
      "resource": "projects.locations.triggers",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/triggers",
      "description": "Creates a new `BuildTrigger`.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`",
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "required": true,
          "location": "path"
        },
        "projectId": {
          "description": "Required. ID of the project for which to configure automatic builds.",
          "type": "string",
          "location": "query"
        }
      },
      "body_schema_ref": "BuildTrigger",
      "body_schema": {
        "description": "Configuration for an automated build in response to source repository changes.",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. Unique identifier of the trigger."
          },
          "webhookConfig": {
            "$ref": "WebhookConfig",
            "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
          },
          "bitbucketServerTriggerConfig": {
            "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
            "$ref": "BitbucketServerTriggerConfig"
          },
          "gitFileSource": {
            "description": "The file source describing the local or remote Build template.",
            "$ref": "GitFileSource"
          },
          "disabled": {
            "type": "boolean",
            "description": "If true, the trigger will never automatically execute a build."
          },
          "gitlabEnterpriseEventsConfig": {
            "description": "GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.",
            "$ref": "GitLabEventsConfig"
          },
          "name": {
            "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
            "type": "string"
          },
          "github": {
            "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
            "$ref": "GitHubEventsConfig"
          },
          "createTime": {
            "type": "string",
            "description": "Output only. Time when the trigger was created.",
            "format": "google-datetime",
            "readOnly": true
          },
          "includeBuildLogs": {
            "enum": [
              "INCLUDE_BUILD_LOGS_UNSPECIFIED",
              "INCLUDE_BUILD_LOGS_WITH_STATUS"
            ],
            "description": "If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.",
            "type": "string",
            "enumDescriptions": [
              "Build logs will not be shown on GitHub.",
              "Build logs will be shown on GitHub."
            ]
          },
          "developerConnectEventConfig": {
            "description": "Optional. The configuration of a trigger that creates a build whenever an event from the DeveloperConnect API is received.",
            "$ref": "DeveloperConnectEventConfig"
          },
          "substitutions": {
            "type": "object",
            "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "eventType": {
            "description": "EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.",
            "type": "string",
            "enum": [
              "EVENT_TYPE_UNSPECIFIED",
              "REPO",
              "WEBHOOK",
              "PUBSUB",
              "MANUAL"
            ],
            "enumDescriptions": [
              "EVENT_TYPE_UNSPECIFIED event_types are ignored.",
              "REPO corresponds to the supported VCS integrations.",
              "WEBHOOK corresponds to webhook triggers.",
              "PUBSUB corresponds to pubsub triggers.",
              "MANUAL corresponds to manual-only invoked triggers."
            ]
          },
          "includedFiles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build."
          },
          "ignoredFiles": {
            "type": "array",
            "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
            "items": {
              "type": "string"
            }
          },
          "resourceName": {
            "type": "string",
            "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
          },
          "build": {
            "$ref": "Build",
            "description": "Contents of the build template."
          },
          "approvalConfig": {
            "description": "Configuration for manual approval to start a build invocation of this BuildTrigger.",
            "$ref": "ApprovalConfig"
          },
          "serviceAccount": {
            "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set and the legacy Cloud Build service account ([PROJECT_NUM]@cloudbuild.gserviceaccount.com) is the default for the project then it will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`",
            "type": "string"
          },
          "description": {
            "description": "Human-readable description of this trigger.",
            "type": "string"
          },
          "filename": {
            "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).",
            "type": "string"
          },
          "pubsubConfig": {
            "$ref": "PubsubConfig",
            "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
          },
          "triggerTemplate": {
            "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
            "$ref": "RepoSource"
          },
          "autodetect": {
            "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
            "type": "boolean"
          },
          "filter": {
            "type": "string",
            "description": "A Common Expression Language string."
          },
          "repositoryEventConfig": {
            "$ref": "RepositoryEventConfig",
            "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "description": "Tags for annotation of a `BuildTrigger`",
            "type": "array"
          },
          "sourceToBuild": {
            "$ref": "GitRepoSource",
            "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
          }
        },
        "id": "BuildTrigger"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "BuildTrigger"
    },
    {
      "operation_id": "cloudbuild.projects.locations.triggers.run",
      "resource": "projects.locations.triggers",
      "action": "run",
      "http_method": "POST",
      "path_template": "v1/{+name}:run",
      "description": "Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "location": "path",
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
          "description": "The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
          "required": true
        }
      },
      "body_schema_ref": "RunBuildTriggerRequest",
      "body_schema": {
        "properties": {
          "triggerId": {
            "type": "string",
            "description": "Required. ID of the trigger."
          },
          "projectId": {
            "type": "string",
            "description": "Required. ID of the project."
          },
          "source": {
            "$ref": "RepoSource",
            "description": "Source to build against this trigger. Branch and tag names cannot consist of regular expressions."
          }
        },
        "id": "RunBuildTriggerRequest",
        "description": "Specifies a build trigger to run and the source to use.",
        "type": "object"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.triggers.delete",
      "resource": "projects.locations.triggers",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a `BuildTrigger` by its project ID and trigger ID.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "projectId": {
          "location": "query",
          "description": "Required. ID of the project that owns the trigger.",
          "type": "string"
        },
        "triggerId": {
          "type": "string",
          "location": "query",
          "description": "Required. ID of the `BuildTrigger` to delete."
        },
        "name": {
          "required": true,
          "type": "string",
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$",
          "description": "The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.projects.locations.triggers.get",
      "resource": "projects.locations.triggers",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Returns information about a `BuildTrigger`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "type": "string",
          "location": "path",
          "description": "The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$"
        },
        "triggerId": {
          "type": "string",
          "location": "query",
          "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get."
        },
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project that owns the trigger.",
          "location": "query"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "BuildTrigger"
    },
    {
      "operation_id": "cloudbuild.projects.locations.triggers.patch",
      "resource": "projects.locations.triggers",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+resourceName}",
      "description": "Updates a `BuildTrigger` by its project ID and trigger ID.",
      "required_params": [
        "resourceName"
      ],
      "parameters": {
        "projectId": {
          "location": "query",
          "description": "Required. ID of the project that owns the trigger.",
          "type": "string"
        },
        "triggerId": {
          "description": "Required. ID of the `BuildTrigger` to update.",
          "type": "string",
          "location": "query"
        },
        "resourceName": {
          "location": "path",
          "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.",
          "required": true,
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+/triggers/[^/]+$"
        },
        "updateMask": {
          "location": "query",
          "type": "string",
          "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.",
          "format": "google-fieldmask"
        }
      },
      "body_schema_ref": "BuildTrigger",
      "body_schema": {
        "description": "Configuration for an automated build in response to source repository changes.",
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. Unique identifier of the trigger."
          },
          "webhookConfig": {
            "$ref": "WebhookConfig",
            "description": "WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL."
          },
          "bitbucketServerTriggerConfig": {
            "description": "BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.",
            "$ref": "BitbucketServerTriggerConfig"
          },
          "gitFileSource": {
            "description": "The file source describing the local or remote Build template.",
            "$ref": "GitFileSource"
          },
          "disabled": {
            "type": "boolean",
            "description": "If true, the trigger will never automatically execute a build."
          },
          "gitlabEnterpriseEventsConfig": {
            "description": "GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.",
            "$ref": "GitLabEventsConfig"
          },
          "name": {
            "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
            "type": "string"
          },
          "github": {
            "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
            "$ref": "GitHubEventsConfig"
          },
          "createTime": {
            "type": "string",
            "description": "Output only. Time when the trigger was created.",
            "format": "google-datetime",
            "readOnly": true
          },
          "includeBuildLogs": {
            "enum": [
              "INCLUDE_BUILD_LOGS_UNSPECIFIED",
              "INCLUDE_BUILD_LOGS_WITH_STATUS"
            ],
            "description": "If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.",
            "type": "string",
            "enumDescriptions": [
              "Build logs will not be shown on GitHub.",
              "Build logs will be shown on GitHub."
            ]
          },
          "developerConnectEventConfig": {
            "description": "Optional. The configuration of a trigger that creates a build whenever an event from the DeveloperConnect API is received.",
            "$ref": "DeveloperConnectEventConfig"
          },
          "substitutions": {
            "type": "object",
            "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "eventType": {
            "description": "EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.",
            "type": "string",
            "enum": [
              "EVENT_TYPE_UNSPECIFIED",
              "REPO",
              "WEBHOOK",
              "PUBSUB",
              "MANUAL"
            ],
            "enumDescriptions": [
              "EVENT_TYPE_UNSPECIFIED event_types are ignored.",
              "REPO corresponds to the supported VCS integrations.",
              "WEBHOOK corresponds to webhook triggers.",
              "PUBSUB corresponds to pubsub triggers.",
              "MANUAL corresponds to manual-only invoked triggers."
            ]
          },
          "includedFiles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build."
          },
          "ignoredFiles": {
            "type": "array",
            "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
            "items": {
              "type": "string"
            }
          },
          "resourceName": {
            "type": "string",
            "description": "The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service."
          },
          "build": {
            "$ref": "Build",
            "description": "Contents of the build template."
          },
          "approvalConfig": {
            "description": "Configuration for manual approval to start a build invocation of this BuildTrigger.",
            "$ref": "ApprovalConfig"
          },
          "serviceAccount": {
            "description": "The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set and the legacy Cloud Build service account ([PROJECT_NUM]@cloudbuild.gserviceaccount.com) is the default for the project then it will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`",
            "type": "string"
          },
          "description": {
            "description": "Human-readable description of this trigger.",
            "type": "string"
          },
          "filename": {
            "description": "Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).",
            "type": "string"
          },
          "pubsubConfig": {
            "$ref": "PubsubConfig",
            "description": "PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published."
          },
          "triggerTemplate": {
            "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
            "$ref": "RepoSource"
          },
          "autodetect": {
            "description": "Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.",
            "type": "boolean"
          },
          "filter": {
            "type": "string",
            "description": "A Common Expression Language string."
          },
          "repositoryEventConfig": {
            "$ref": "RepositoryEventConfig",
            "description": "The configuration of a trigger that creates a build whenever an event from Repo API is received."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "description": "Tags for annotation of a `BuildTrigger`",
            "type": "array"
          },
          "sourceToBuild": {
            "$ref": "GitRepoSource",
            "description": "The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers."
          }
        },
        "id": "BuildTrigger"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "BuildTrigger"
    },
    {
      "operation_id": "cloudbuild.projects.locations.builds.cancel",
      "resource": "projects.locations.builds",
      "action": "cancel",
      "http_method": "POST",
      "path_template": "v1/{+name}:cancel",
      "description": "Cancels a build in progress.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "required": true,
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
          "type": "string",
          "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`"
        }
      },
      "body_schema_ref": "CancelBuildRequest",
      "body_schema": {
        "id": "CancelBuildRequest",
        "description": "Request to cancel an ongoing build.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Required. ID of the build."
          },
          "name": {
            "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "description": "Required. ID of the project."
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Build"
    },
    {
      "operation_id": "cloudbuild.projects.locations.builds.approve",
      "resource": "projects.locations.builds",
      "action": "approve",
      "http_method": "POST",
      "path_template": "v1/{+name}:approve",
      "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "type": "string",
          "description": "Required. Name of the target build. For example: \"projects/{$project_id}/builds/{$build_id}\"",
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
          "required": true
        }
      },
      "body_schema_ref": "ApproveBuildRequest",
      "body_schema": {
        "type": "object",
        "properties": {
          "approvalResult": {
            "description": "Approval decision and metadata.",
            "$ref": "ApprovalResult"
          }
        },
        "id": "ApproveBuildRequest",
        "description": "Request to approve or reject a pending build."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.builds.retry",
      "resource": "projects.locations.builds",
      "action": "retry",
      "http_method": "POST",
      "path_template": "v1/{+name}:retry",
      "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "location": "path",
          "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
          "type": "string"
        }
      },
      "body_schema_ref": "RetryBuildRequest",
      "body_schema": {
        "type": "object",
        "id": "RetryBuildRequest",
        "description": "Specifies a build to retry.",
        "properties": {
          "name": {
            "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
            "type": "string"
          },
          "projectId": {
            "description": "Required. ID of the project.",
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Required. Build ID of the original build."
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.builds.list",
      "resource": "projects.locations.builds",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/builds",
      "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "projectId": {
          "type": "string",
          "location": "query",
          "description": "Required. ID of the project."
        },
        "pageToken": {
          "location": "query",
          "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "description": "Number of results to return in the list.",
          "format": "int32",
          "location": "query"
        },
        "parent": {
          "location": "path",
          "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "type": "string"
        },
        "filter": {
          "type": "string",
          "location": "query",
          "description": "The raw filter text to constrain the results."
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListBuildsResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.builds.create",
      "resource": "projects.locations.builds",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/builds",
      "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "projectId": {
          "location": "query",
          "description": "Required. ID of the project.",
          "type": "string"
        },
        "parent": {
          "location": "path",
          "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "type": "string"
        }
      },
      "body_schema_ref": "Build",
      "body_schema": {
        "id": "Build",
        "type": "object",
        "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
        "properties": {
          "createTime": {
            "type": "string",
            "readOnly": true,
            "description": "Output only. Time at which the request to create the build was received.",
            "format": "google-datetime"
          },
          "approval": {
            "description": "Output only. Describes this build's approval configuration, status, and result.",
            "$ref": "BuildApproval",
            "readOnly": true
          },
          "source": {
            "$ref": "Source",
            "description": "Optional. The location of the source files to build."
          },
          "startTime": {
            "type": "string",
            "readOnly": true,
            "format": "google-datetime",
            "description": "Output only. Time at which execution of the build was started."
          },
          "dependencies": {
            "items": {
              "$ref": "Dependency"
            },
            "type": "array",
            "description": "Optional. Dependencies that the Cloud Build worker will fetch before executing user steps."
          },
          "gitConfig": {
            "$ref": "GitConfig",
            "description": "Optional. Configuration for git operations."
          },
          "substitutions": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "Substitutions data for `Build` resource."
          },
          "status": {
            "readOnly": true,
            "enumDescriptions": [
              "Status of the build is unknown.",
              "Build has been created and is pending execution and queuing. It has not been queued.",
              "Build or step is queued; work has not yet begun.",
              "Build or step is being executed.",
              "Build or step finished successfully.",
              "Build or step failed to complete successfully.",
              "Build or step failed due to an internal cause.",
              "Build or step took longer than was allowed.",
              "Build or step was canceled by a user.",
              "Build was enqueued for longer than the value of `queue_ttl`."
            ],
            "enum": [
              "STATUS_UNKNOWN",
              "PENDING",
              "QUEUED",
              "WORKING",
              "SUCCESS",
              "FAILURE",
              "INTERNAL_ERROR",
              "TIMEOUT",
              "CANCELLED",
              "EXPIRED"
            ],
            "type": "string",
            "description": "Output only. Status of the build."
          },
          "timing": {
            "additionalProperties": {
              "$ref": "TimeSpan"
            },
            "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.",
            "readOnly": true,
            "type": "object"
          },
          "options": {
            "description": "Special options for this build.",
            "$ref": "BuildOptions"
          },
          "availableSecrets": {
            "$ref": "Secrets",
            "description": "Secrets and secret environment variables."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for annotation of a `Build`. These are not docker tags."
          },
          "sourceProvenance": {
            "description": "Output only. A permanent fixed identifier for source.",
            "readOnly": true,
            "$ref": "SourceProvenance"
          },
          "steps": {
            "description": "Required. The operations to be performed on the workspace.",
            "type": "array",
            "items": {
              "$ref": "BuildStep"
            }
          },
          "buildTriggerId": {
            "readOnly": true,
            "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
            "type": "string"
          },
          "finishTime": {
            "readOnly": true,
            "format": "google-datetime",
            "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "description": "Output only. Unique identifier of the build.",
            "type": "string"
          },
          "statusDetail": {
            "description": "Output only. Customer-readable message about the current status.",
            "readOnly": true,
            "type": "string"
          },
          "results": {
            "description": "Output only. Results of the build.",
            "readOnly": true,
            "$ref": "Results"
          },
          "secrets": {
            "description": "Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets",
            "items": {
              "$ref": "Secret"
            },
            "type": "array"
          },
          "failureInfo": {
            "description": "Output only. Contains information about the build when status=FAILURE.",
            "readOnly": true,
            "$ref": "FailureInfo"
          },
          "name": {
            "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
            "type": "string",
            "readOnly": true
          },
          "warnings": {
            "readOnly": true,
            "type": "array",
            "description": "Output only. Non-fatal problems encountered during the execution of the build.",
            "items": {
              "$ref": "Warning"
            }
          },
          "serviceAccount": {
            "type": "string",
            "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. "
          },
          "logsBucket": {
            "description": "Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
            "type": "string"
          },
          "artifacts": {
            "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps.",
            "$ref": "Artifacts"
          },
          "timeout": {
            "type": "string",
            "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.",
            "format": "google-duration"
          },
          "images": {
            "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "queueTtl": {
            "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
            "type": "string",
            "format": "google-duration"
          },
          "logUrl": {
            "type": "string",
            "description": "Output only. URL to logs for this build in Google Cloud Console.",
            "readOnly": true
          },
          "projectId": {
            "readOnly": true,
            "description": "Output only. ID of the project.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.builds.get",
      "resource": "projects.locations.builds",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project.",
          "location": "query"
        },
        "id": {
          "description": "Required. ID of the build.",
          "type": "string",
          "location": "query"
        },
        "name": {
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
          "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
          "required": true,
          "location": "path"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Build"
    },
    {
      "operation_id": "cloudbuild.projects.locations.workerPools.get",
      "resource": "projects.locations.workerPools",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Returns details of a `WorkerPool`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
          "type": "string",
          "location": "path",
          "description": "Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.",
          "required": true
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "WorkerPool"
    },
    {
      "operation_id": "cloudbuild.projects.locations.workerPools.delete",
      "resource": "projects.locations.workerPools",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a `WorkerPool`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "etag": {
          "location": "query",
          "type": "string",
          "description": "Optional. If provided, it must match the server's etag on the workerpool for the request to be processed."
        },
        "validateOnly": {
          "location": "query",
          "type": "boolean",
          "description": "If set, validate the request and preview the response, but do not actually post it."
        },
        "name": {
          "location": "path",
          "required": true,
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
          "description": "Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`."
        },
        "allowMissing": {
          "location": "query",
          "type": "boolean",
          "description": "If set to true, and the `WorkerPool` is not found, the request will succeed but no action will be taken on the server."
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.workerPools.list",
      "resource": "projects.locations.workerPools",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/workerPools",
      "description": "Lists `WorkerPool`s.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "pageSize": {
          "format": "int32",
          "location": "query",
          "description": "The maximum number of `WorkerPool`s to return. The service may return fewer than this value. If omitted, the server will use a sensible default.",
          "type": "integer"
        },
        "pageToken": {
          "description": "A page token, received from a previous `ListWorkerPools` call. Provide this to retrieve the subsequent page.",
          "type": "string",
          "location": "query"
        },
        "parent": {
          "description": "Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/{location}`.",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListWorkerPoolsResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.workerPools.create",
      "resource": "projects.locations.workerPools",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/workerPools",
      "description": "Creates a `WorkerPool`.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "workerPoolId": {
          "location": "query",
          "type": "string",
          "description": "Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/."
        },
        "validateOnly": {
          "description": "If set, validate the request and preview the response, but do not actually post it.",
          "location": "query",
          "type": "boolean"
        },
        "parent": {
          "description": "Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`.",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "required": true,
          "location": "path",
          "type": "string"
        }
      },
      "body_schema_ref": "WorkerPool",
      "body_schema": {
        "type": "object",
        "id": "WorkerPool",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations."
          },
          "privatePoolV1Config": {
            "$ref": "PrivatePoolV1Config",
            "description": "Private Pool configuration."
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "description": "Output only. `WorkerPool` state.",
            "enumDescriptions": [
              "State of the `WorkerPool` is unknown.",
              "`WorkerPool` is being created.",
              "`WorkerPool` is running.",
              "`WorkerPool` is being deleted: cancelling builds and draining workers.",
              "`WorkerPool` is deleted.",
              "`WorkerPool` is being updated; new builds cannot be run."
            ],
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "RUNNING",
              "DELETING",
              "DELETED",
              "UPDATING"
            ]
          },
          "updateTime": {
            "format": "google-datetime",
            "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
            "readOnly": true,
            "format": "google-datetime",
            "type": "string"
          },
          "createTime": {
            "format": "google-datetime",
            "readOnly": true,
            "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
            "type": "string"
          },
          "uid": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. A unique identifier for the `WorkerPool`."
          },
          "etag": {
            "type": "string",
            "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.",
            "readOnly": true
          }
        },
        "description": "Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview)."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.workerPools.patch",
      "resource": "projects.locations.workerPools",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates a `WorkerPool`.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/workerPools/[^/]+$",
          "required": true,
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean",
          "description": "If set, validate the request and preview the response, but do not actually post it.",
          "location": "query"
        },
        "updateMask": {
          "location": "query",
          "format": "google-fieldmask",
          "type": "string",
          "description": "Optional. A mask specifying which fields in `worker_pool` to update."
        }
      },
      "body_schema_ref": "WorkerPool",
      "body_schema": {
        "type": "object",
        "id": "WorkerPool",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations."
          },
          "privatePoolV1Config": {
            "$ref": "PrivatePoolV1Config",
            "description": "Private Pool configuration."
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "description": "Output only. `WorkerPool` state.",
            "enumDescriptions": [
              "State of the `WorkerPool` is unknown.",
              "`WorkerPool` is being created.",
              "`WorkerPool` is running.",
              "`WorkerPool` is being deleted: cancelling builds and draining workers.",
              "`WorkerPool` is deleted.",
              "`WorkerPool` is being updated; new builds cannot be run."
            ],
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "RUNNING",
              "DELETING",
              "DELETED",
              "UPDATING"
            ]
          },
          "updateTime": {
            "format": "google-datetime",
            "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "description": "Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.",
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. Time at which the request to delete the `WorkerPool` was received.",
            "readOnly": true,
            "format": "google-datetime",
            "type": "string"
          },
          "createTime": {
            "format": "google-datetime",
            "readOnly": true,
            "description": "Output only. Time at which the request to create the `WorkerPool` was received.",
            "type": "string"
          },
          "uid": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. A unique identifier for the `WorkerPool`."
          },
          "etag": {
            "type": "string",
            "description": "Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.",
            "readOnly": true
          }
        },
        "description": "Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview)."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.get",
      "resource": "projects.locations.bitbucketServerConfigs",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Retrieve a `BitbucketServerConfig`. This API is experimental.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "location": "path",
          "description": "Required. The config resource name.",
          "type": "string",
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "BitbucketServerConfig"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.patch",
      "resource": "projects.locations.bitbucketServerConfigs",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates an existing `BitbucketServerConfig`. This API is experimental.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
          "description": "The resource name for the config.",
          "required": true,
          "type": "string",
          "location": "path"
        },
        "updateMask": {
          "type": "string",
          "location": "query",
          "format": "google-fieldmask",
          "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed."
        }
      },
      "body_schema_ref": "BitbucketServerConfig",
      "body_schema": {
        "description": "BitbucketServerConfig represents the configuration for a Bitbucket Server.",
        "properties": {
          "createTime": {
            "description": "Time when the config was created.",
            "type": "string",
            "format": "google-datetime"
          },
          "peeredNetwork": {
            "description": "Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
            "type": "string"
          },
          "hostUri": {
            "description": "Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
            "type": "string"
          },
          "peeredNetworkIpRange": {
            "type": "string",
            "description": "Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set."
          },
          "webhookKey": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config."
          },
          "sslCa": {
            "type": "string",
            "description": "Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt."
          },
          "secrets": {
            "description": "Required. Secret Manager secrets needed by the config.",
            "$ref": "BitbucketServerSecrets"
          },
          "username": {
            "description": "Username of the account Cloud Build will use on Bitbucket Server.",
            "type": "string"
          },
          "connectedRepositories": {
            "type": "array",
            "items": {
              "$ref": "BitbucketServerRepositoryId"
            },
            "readOnly": true,
            "description": "Output only. Connected Bitbucket Server repositories for this config."
          },
          "name": {
            "description": "The resource name for the config.",
            "type": "string"
          },
          "apiKey": {
            "description": "Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
            "type": "string"
          }
        },
        "type": "object",
        "id": "BitbucketServerConfig"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.delete",
      "resource": "projects.locations.bitbucketServerConfigs",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Delete a `BitbucketServerConfig`. This API is experimental.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "location": "path",
          "required": true,
          "description": "Required. The config resource name.",
          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.list",
      "resource": "projects.locations.bitbucketServerConfigs",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/bitbucketServerConfigs",
      "description": "List all `BitbucketServerConfigs` for a given project. This API is experimental.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "pageSize": {
          "location": "query",
          "type": "integer",
          "description": "The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.",
          "format": "int32"
        },
        "pageToken": {
          "description": "A page token, received from a previous `ListBitbucketServerConfigsRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBitbucketServerConfigsRequest` must match the call that provided the page token.",
          "location": "query",
          "type": "string"
        },
        "parent": {
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "type": "string",
          "description": "Required. Name of the parent resource.",
          "location": "path",
          "required": true
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListBitbucketServerConfigsResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository",
      "resource": "projects.locations.bitbucketServerConfigs",
      "action": "removeBitbucketServerConnectedRepository",
      "http_method": "POST",
      "path_template": "v1/{+config}:removeBitbucketServerConnectedRepository",
      "description": "Remove a Bitbucket Server repository from a given BitbucketServerConfig's connected repositories. This API is experimental.",
      "required_params": [
        "config"
      ],
      "parameters": {
        "config": {
          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
          "description": "Required. The name of the `BitbucketServerConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "required": true,
          "type": "string",
          "location": "path"
        }
      },
      "body_schema_ref": "RemoveBitbucketServerConnectedRepositoryRequest",
      "body_schema": {
        "id": "RemoveBitbucketServerConnectedRepositoryRequest",
        "description": "RPC request object accepted by RemoveBitbucketServerConnectedRepository RPC method.",
        "type": "object",
        "properties": {
          "connectedRepository": {
            "$ref": "BitbucketServerRepositoryId",
            "description": "The connected repository to remove."
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.create",
      "resource": "projects.locations.bitbucketServerConfigs",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/bitbucketServerConfigs",
      "description": "Creates a new `BitbucketServerConfig`. This API is experimental.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "required": true,
          "location": "path",
          "type": "string",
          "description": "Required. Name of the parent resource.",
          "pattern": "^projects/[^/]+/locations/[^/]+$"
        },
        "bitbucketServerConfigId": {
          "location": "query",
          "type": "string",
          "description": "Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character."
        }
      },
      "body_schema_ref": "BitbucketServerConfig",
      "body_schema": {
        "description": "BitbucketServerConfig represents the configuration for a Bitbucket Server.",
        "properties": {
          "createTime": {
            "description": "Time when the config was created.",
            "type": "string",
            "format": "google-datetime"
          },
          "peeredNetwork": {
            "description": "Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
            "type": "string"
          },
          "hostUri": {
            "description": "Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
            "type": "string"
          },
          "peeredNetworkIpRange": {
            "type": "string",
            "description": "Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set."
          },
          "webhookKey": {
            "readOnly": true,
            "type": "string",
            "description": "Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config."
          },
          "sslCa": {
            "type": "string",
            "description": "Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt."
          },
          "secrets": {
            "description": "Required. Secret Manager secrets needed by the config.",
            "$ref": "BitbucketServerSecrets"
          },
          "username": {
            "description": "Username of the account Cloud Build will use on Bitbucket Server.",
            "type": "string"
          },
          "connectedRepositories": {
            "type": "array",
            "items": {
              "$ref": "BitbucketServerRepositoryId"
            },
            "readOnly": true,
            "description": "Output only. Connected Bitbucket Server repositories for this config."
          },
          "name": {
            "description": "The resource name for the config.",
            "type": "string"
          },
          "apiKey": {
            "description": "Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.",
            "type": "string"
          }
        },
        "type": "object",
        "id": "BitbucketServerConfig"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.repos.list",
      "resource": "projects.locations.bitbucketServerConfigs.repos",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/repos",
      "description": "List all repositories for a given `BitbucketServerConfig`. This API is experimental.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "pageSize": {
          "description": "The maximum number of configs to return. The service may return fewer than this value. The maximum value is 1000; values above 1000 will be coerced to 1000.",
          "format": "int32",
          "location": "query",
          "type": "integer"
        },
        "pageToken": {
          "location": "query",
          "type": "string",
          "description": "A page token, received from a previous `ListBitbucketServerRepositoriesRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBitbucketServerConfigsRequest` must match the call that provided the page token."
        },
        "parent": {
          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
          "required": true,
          "type": "string",
          "description": "Required. Name of the parent resource.",
          "location": "path"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListBitbucketServerRepositoriesResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.bitbucketServerConfigs.connectedRepositories.batchCreate",
      "resource": "projects.locations.bitbucketServerConfigs.connectedRepositories",
      "action": "batchCreate",
      "http_method": "POST",
      "path_template": "v1/{+parent}/connectedRepositories:batchCreate",
      "description": "Batch connecting Bitbucket Server repositories to Cloud Build.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+/bitbucketServerConfigs/[^/]+$",
          "location": "path",
          "description": "The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`",
          "required": true
        }
      },
      "body_schema_ref": "BatchCreateBitbucketServerConnectedRepositoriesRequest",
      "body_schema": {
        "id": "BatchCreateBitbucketServerConnectedRepositoriesRequest",
        "properties": {
          "requests": {
            "items": {
              "$ref": "CreateBitbucketServerConnectedRepositoryRequest"
            },
            "description": "Required. Requests to connect Bitbucket Server repositories.",
            "type": "array"
          }
        },
        "type": "object",
        "description": "RPC request object accepted by BatchCreateBitbucketServerConnectedRepositories RPC method."
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.githubEnterpriseConfigs.list",
      "resource": "projects.locations.githubEnterpriseConfigs",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/githubEnterpriseConfigs",
      "description": "List all GitHubEnterpriseConfigs for a given project.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "projectId": {
          "description": "ID of the project",
          "type": "string",
          "location": "query",
          "deprecated": true
        },
        "parent": {
          "required": true,
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "type": "string",
          "location": "path",
          "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListGithubEnterpriseConfigsResponse"
    },
    {
      "operation_id": "cloudbuild.projects.locations.githubEnterpriseConfigs.delete",
      "resource": "projects.locations.githubEnterpriseConfigs",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "configId": {
          "type": "string",
          "description": "Unique identifier of the `GitHubEnterpriseConfig`",
          "location": "query",
          "deprecated": true
        },
        "projectId": {
          "location": "query",
          "type": "string",
          "deprecated": true,
          "description": "ID of the project"
        },
        "name": {
          "required": true,
          "type": "string",
          "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
          "location": "path",
          "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.githubEnterpriseConfigs.get",
      "resource": "projects.locations.githubEnterpriseConfigs",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Retrieve a GitHubEnterpriseConfig.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "projectId": {
          "description": "ID of the project",
          "location": "query",
          "type": "string",
          "deprecated": true
        },
        "configId": {
          "deprecated": true,
          "description": "Unique identifier of the `GitHubEnterpriseConfig`",
          "location": "query",
          "type": "string"
        },
        "name": {
          "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
          "type": "string",
          "description": "This field should contain the name of the enterprise config resource. For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "location": "path",
          "required": true
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "GitHubEnterpriseConfig"
    },
    {
      "operation_id": "cloudbuild.projects.locations.githubEnterpriseConfigs.create",
      "resource": "projects.locations.githubEnterpriseConfigs",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/githubEnterpriseConfigs",
      "description": "Create an association between a GCP project and a GitHub Enterprise server.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "projectId": {
          "description": "ID of the project.",
          "type": "string",
          "deprecated": true,
          "location": "query"
        },
        "parent": {
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "description": "Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}",
          "type": "string",
          "required": true
        },
        "gheConfigId": {
          "type": "string",
          "description": "Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character",
          "location": "query"
        }
      },
      "body_schema_ref": "GitHubEnterpriseConfig",
      "body_schema": {
        "id": "GitHubEnterpriseConfig",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Optional. Name to display for this config."
          },
          "webhookKey": {
            "type": "string",
            "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
          },
          "hostUrl": {
            "type": "string",
            "description": "The URL of the github enterprise host the configuration is for."
          },
          "appId": {
            "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
            "type": "string",
            "format": "int64"
          },
          "sslCa": {
            "description": "Optional. SSL certificate to use for requests to GitHub Enterprise.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. Time when the installation was associated with the project.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "peeredNetwork": {
            "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
            "type": "string"
          },
          "secrets": {
            "$ref": "GitHubEnterpriseSecrets",
            "description": "Optional. Names of secrets in Secret Manager."
          },
          "name": {
            "type": "string",
            "description": "The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
          }
        },
        "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
        "type": "object"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.projects.locations.githubEnterpriseConfigs.patch",
      "resource": "projects.locations.githubEnterpriseConfigs",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Update an association between a GCP project and a GitHub Enterprise server.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "updateMask": {
          "format": "google-fieldmask",
          "location": "query",
          "type": "string",
          "description": "Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed."
        },
        "name": {
          "description": "The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"",
          "type": "string",
          "location": "path",
          "pattern": "^projects/[^/]+/locations/[^/]+/githubEnterpriseConfigs/[^/]+$",
          "required": true
        }
      },
      "body_schema_ref": "GitHubEnterpriseConfig",
      "body_schema": {
        "id": "GitHubEnterpriseConfig",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Optional. Name to display for this config."
          },
          "webhookKey": {
            "type": "string",
            "description": "The key that should be attached to webhook calls to the ReceiveWebhook endpoint."
          },
          "hostUrl": {
            "type": "string",
            "description": "The URL of the github enterprise host the configuration is for."
          },
          "appId": {
            "description": "Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.",
            "type": "string",
            "format": "int64"
          },
          "sslCa": {
            "description": "Optional. SSL certificate to use for requests to GitHub Enterprise.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. Time when the installation was associated with the project.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "peeredNetwork": {
            "description": "Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.",
            "type": "string"
          },
          "secrets": {
            "$ref": "GitHubEnterpriseSecrets",
            "description": "Optional. Names of secrets in Secret Manager."
          },
          "name": {
            "type": "string",
            "description": "The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\""
          }
        },
        "description": "GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.",
        "type": "object"
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Operation"
    },
    {
      "operation_id": "cloudbuild.webhook",
      "resource": "v1",
      "action": "webhook",
      "http_method": "POST",
      "path_template": "v1/webhook",
      "description": "ReceiveWebhook is called when the API receives a GitHub webhook.",
      "required_params": [],
      "parameters": {
        "webhookKey": {
          "type": "string",
          "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
          "location": "query"
        }
      },
      "body_schema_ref": "HttpBody",
      "body_schema": {
        "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
        "id": "HttpBody",
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The HTTP Content-Type header value specifying the content type of the body."
          },
          "extensions": {
            "type": "array",
            "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
            "items": {
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            }
          },
          "data": {
            "format": "byte",
            "description": "The HTTP request/response body as raw binary.",
            "type": "string"
          }
        }
      },
      "scopes_required": [],
      "response_type": "Empty"
    },
    {
      "operation_id": "cloudbuild.locations.regionalWebhook",
      "resource": "locations",
      "action": "regionalWebhook",
      "http_method": "POST",
      "path_template": "v1/{+location}/regionalWebhook",
      "description": "ReceiveRegionalWebhook is called when the API receives a regional GitHub webhook.",
      "required_params": [
        "location"
      ],
      "parameters": {
        "location": {
          "type": "string",
          "description": "Required. The location where the webhook should be sent.",
          "pattern": "^locations/[^/]+$",
          "required": true,
          "location": "path"
        },
        "webhookKey": {
          "description": "For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": "HttpBody",
      "body_schema": {
        "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
        "id": "HttpBody",
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "description": "The HTTP Content-Type header value specifying the content type of the body."
          },
          "extensions": {
            "type": "array",
            "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
            "items": {
              "additionalProperties": {
                "type": "any",
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            }
          },
          "data": {
            "format": "byte",
            "description": "The HTTP request/response body as raw binary.",
            "type": "string"
          }
        }
      },
      "scopes_required": [],
      "response_type": "Empty"
    }
  ]
}