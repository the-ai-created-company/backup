{
  "service": "secretmanager",
  "version": "v1",
  "base_url": "https://secretmanager.googleapis.com/",
  "total_endpoints": 32,
  "endpoints": [
    {
      "operation_id": "secretmanager.projects.locations.list",
      "resource": "projects.locations",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+name}/locations",
      "description": "Lists information about the supported locations for this service.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "The resource that owns the locations collection, if applicable.",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "filter": {
          "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
          "location": "query",
          "type": "string"
        },
        "pageSize": {
          "description": "The maximum number of results to return. If not set, the service selects a default.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
          "location": "query",
          "type": "string"
        },
        "extraLocationTypes": {
          "description": "Optional. A list of extra location types that should be used as conditions for controlling the visibility of the locations.",
          "location": "query",
          "repeated": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListLocationsResponse"
    },
    {
      "operation_id": "secretmanager.projects.locations.get",
      "resource": "projects.locations",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets information about a location.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Resource name for the location.",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Location"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.list",
      "resource": "projects.locations.secrets",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/secrets",
      "description": "Lists Secrets.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the project associated with the Secrets, in the format `projects/*` or `projects/*/locations/*`",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "pageSize": {
          "description": "Optional. The maximum number of results to be returned in a single page. If set to 0, the server decides the number of results to return. If the number is greater than 25000, it is capped at 25000.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Optional. Pagination token, returned earlier via ListSecretsResponse.next_page_token.",
          "location": "query",
          "type": "string"
        },
        "filter": {
          "description": "Optional. Filter string, adhering to the rules in [List-operation filtering](https://cloud.google.com/secret-manager/docs/filtering). List only secrets matching the filter. If filter is empty, all secrets are listed.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListSecretsResponse"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.create",
      "resource": "projects.locations.secrets",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/secrets",
      "description": "Creates a new Secret containing no SecretVersions.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the project to associate with the Secret, in the format `projects/*` or `projects/*/locations/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "secretId": {
          "description": "Required. This must be unique within the project. A secret ID is a string with a maximum length of 255 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore (`_`) characters.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": "Secret",
      "body_schema": {
        "id": "Secret",
        "description": "A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
            "readOnly": true,
            "type": "string"
          },
          "replication": {
            "description": "Optional. Immutable. The replication policy of the secret data attached to the Secret. The replication policy cannot be changed after the Secret has been created.",
            "$ref": "Replication"
          },
          "createTime": {
            "description": "Output only. The time at which the Secret was created.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "labels": {
            "description": "The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\\p{Ll}\\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "topics": {
            "description": "Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.",
            "type": "array",
            "items": {
              "$ref": "Topic"
            }
          },
          "expireTime": {
            "description": "Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.",
            "type": "string",
            "format": "google-datetime"
          },
          "ttl": {
            "description": "Input only. The TTL for the Secret.",
            "type": "string",
            "format": "google-duration"
          },
          "etag": {
            "description": "Optional. Etag of the currently stored Secret.",
            "type": "string"
          },
          "rotation": {
            "description": "Optional. Rotation policy attached to the Secret. May be excluded if there is no rotation policy.",
            "$ref": "Rotation"
          },
          "versionAliases": {
            "description": "Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. Access by alias is only be supported on GetSecretVersion and AccessSecretVersion.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "int64"
            }
          },
          "annotations": {
            "description": "Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "versionDestroyTtl": {
            "description": "Optional. Secret Version TTL after destruction request This is a part of the Delayed secret version destroy feature. For secret with TTL>0, version destruction doesn't happen immediately on calling destroy instead the version goes to a disabled state and destruction happens after the TTL expires.",
            "type": "string",
            "format": "google-duration"
          },
          "customerManagedEncryption": {
            "description": "Optional. The customer-managed encryption configuration of the regionalized secrets. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.",
            "$ref": "CustomerManagedEncryption"
          },
          "tags": {
            "description": "Optional. Input only. Immutable. Mapping of Tag keys/values directly bound to this resource. For example: \"123/environment\": \"production\", \"123/costCenter\": \"marketing\" Tags are used to organize and group resources. Tags can be used to control policy evaluation for the resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Secret"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.addVersion",
      "resource": "projects.locations.secrets",
      "action": "addVersion",
      "http_method": "POST",
      "path_template": "v1/{+parent}:addVersion",
      "description": "Creates a new SecretVersion containing secret data and attaches it to an existing Secret.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the Secret to associate with the SecretVersion in the format `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "AddSecretVersionRequest",
      "body_schema": {
        "id": "AddSecretVersionRequest",
        "description": "Request message for SecretManagerService.AddSecretVersion.",
        "type": "object",
        "properties": {
          "payload": {
            "description": "Required. The secret payload of the SecretVersion.",
            "$ref": "SecretPayload"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.get",
      "resource": "projects.locations.secrets",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets metadata for a given Secret.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the Secret, in the format `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Secret"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.patch",
      "resource": "projects.locations.secrets",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates metadata of an existing Secret.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "updateMask": {
          "description": "Required. Specifies the fields to be updated.",
          "location": "query",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "body_schema_ref": "Secret",
      "body_schema": {
        "id": "Secret",
        "description": "A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
            "readOnly": true,
            "type": "string"
          },
          "replication": {
            "description": "Optional. Immutable. The replication policy of the secret data attached to the Secret. The replication policy cannot be changed after the Secret has been created.",
            "$ref": "Replication"
          },
          "createTime": {
            "description": "Output only. The time at which the Secret was created.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "labels": {
            "description": "The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\\p{Ll}\\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "topics": {
            "description": "Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.",
            "type": "array",
            "items": {
              "$ref": "Topic"
            }
          },
          "expireTime": {
            "description": "Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.",
            "type": "string",
            "format": "google-datetime"
          },
          "ttl": {
            "description": "Input only. The TTL for the Secret.",
            "type": "string",
            "format": "google-duration"
          },
          "etag": {
            "description": "Optional. Etag of the currently stored Secret.",
            "type": "string"
          },
          "rotation": {
            "description": "Optional. Rotation policy attached to the Secret. May be excluded if there is no rotation policy.",
            "$ref": "Rotation"
          },
          "versionAliases": {
            "description": "Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. Access by alias is only be supported on GetSecretVersion and AccessSecretVersion.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "int64"
            }
          },
          "annotations": {
            "description": "Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "versionDestroyTtl": {
            "description": "Optional. Secret Version TTL after destruction request This is a part of the Delayed secret version destroy feature. For secret with TTL>0, version destruction doesn't happen immediately on calling destroy instead the version goes to a disabled state and destruction happens after the TTL expires.",
            "type": "string",
            "format": "google-duration"
          },
          "customerManagedEncryption": {
            "description": "Optional. The customer-managed encryption configuration of the regionalized secrets. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.",
            "$ref": "CustomerManagedEncryption"
          },
          "tags": {
            "description": "Optional. Input only. Immutable. Mapping of Tag keys/values directly bound to this resource. For example: \"123/environment\": \"production\", \"123/costCenter\": \"marketing\" Tags are used to organize and group resources. Tags can be used to control policy evaluation for the resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Secret"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.delete",
      "resource": "projects.locations.secrets",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a Secret.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the Secret to delete in the format `projects/*/secrets/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "etag": {
          "description": "Optional. Etag of the Secret. The request succeeds if it matches the etag of the currently stored secret object. If the etag is omitted, the request succeeds.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.setIamPolicy",
      "resource": "projects.locations.secrets",
      "action": "setIamPolicy",
      "http_method": "POST",
      "path_template": "v1/{+resource}:setIamPolicy",
      "description": "Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "SetIamPolicyRequest",
      "body_schema": {
        "id": "SetIamPolicyRequest",
        "description": "Request message for `SetIamPolicy` method.",
        "type": "object",
        "properties": {
          "policy": {
            "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
            "$ref": "Policy"
          },
          "updateMask": {
            "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
            "type": "string",
            "format": "google-fieldmask"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Policy"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.getIamPolicy",
      "resource": "projects.locations.secrets",
      "action": "getIamPolicy",
      "http_method": "GET",
      "path_template": "v1/{+resource}:getIamPolicy",
      "description": "Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "options.requestedPolicyVersion": {
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "location": "query",
          "type": "integer",
          "format": "int32"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Policy"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.testIamPermissions",
      "resource": "projects.locations.secrets",
      "action": "testIamPermissions",
      "http_method": "POST",
      "path_template": "v1/{+resource}:testIamPermissions",
      "description": "Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "TestIamPermissionsRequest",
      "body_schema": {
        "id": "TestIamPermissionsRequest",
        "description": "Request message for `TestIamPermissions` method.",
        "type": "object",
        "properties": {
          "permissions": {
            "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "TestIamPermissionsResponse"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.versions.list",
      "resource": "projects.locations.secrets.versions",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/versions",
      "description": "Lists SecretVersions. This call does not return secret data.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the Secret associated with the SecretVersions to list, in the format `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "pageSize": {
          "description": "Optional. The maximum number of results to be returned in a single page. If set to 0, the server decides the number of results to return. If the number is greater than 25000, it is capped at 25000.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Optional. Pagination token, returned earlier via ListSecretVersionsResponse.next_page_token][].",
          "location": "query",
          "type": "string"
        },
        "filter": {
          "description": "Optional. Filter string, adhering to the rules in [List-operation filtering](https://cloud.google.com/secret-manager/docs/filtering). List only secret versions matching the filter. If filter is empty, all secret versions are listed.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListSecretVersionsResponse"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.versions.get",
      "resource": "projects.locations.secrets.versions",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets metadata for a SecretVersion. `projects/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`. `projects/*/secrets/*/versions/latest` or `projects/*/locations/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.versions.access",
      "resource": "projects.locations.secrets.versions",
      "action": "access",
      "http_method": "GET",
      "path_template": "v1/{+name}:access",
      "description": "Accesses a SecretVersion. This call returns the secret data. `projects/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`. `projects/*/secrets/*/versions/latest` or `projects/*/locations/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "AccessSecretVersionResponse"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.versions.disable",
      "resource": "projects.locations.secrets.versions",
      "action": "disable",
      "http_method": "POST",
      "path_template": "v1/{+name}:disable",
      "description": "Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion to disable in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "DisableSecretVersionRequest",
      "body_schema": {
        "id": "DisableSecretVersionRequest",
        "description": "Request message for SecretManagerService.DisableSecretVersion.",
        "type": "object",
        "properties": {
          "etag": {
            "description": "Optional. Etag of the SecretVersion. The request succeeds if it matches the etag of the currently stored secret version object. If the etag is omitted, the request succeeds.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.versions.enable",
      "resource": "projects.locations.secrets.versions",
      "action": "enable",
      "http_method": "POST",
      "path_template": "v1/{+name}:enable",
      "description": "Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion to enable in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "EnableSecretVersionRequest",
      "body_schema": {
        "id": "EnableSecretVersionRequest",
        "description": "Request message for SecretManagerService.EnableSecretVersion.",
        "type": "object",
        "properties": {
          "etag": {
            "description": "Optional. Etag of the SecretVersion. The request succeeds if it matches the etag of the currently stored secret version object. If the etag is omitted, the request succeeds.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.locations.secrets.versions.destroy",
      "resource": "projects.locations.secrets.versions",
      "action": "destroy",
      "http_method": "POST",
      "path_template": "v1/{+name}:destroy",
      "description": "Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion to destroy in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`.",
          "pattern": "^projects/[^/]+/locations/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "DestroySecretVersionRequest",
      "body_schema": {
        "id": "DestroySecretVersionRequest",
        "description": "Request message for SecretManagerService.DestroySecretVersion.",
        "type": "object",
        "properties": {
          "etag": {
            "description": "Optional. Etag of the SecretVersion. The request succeeds if it matches the etag of the currently stored secret version object. If the etag is omitted, the request succeeds.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.secrets.list",
      "resource": "projects.secrets",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/secrets",
      "description": "Lists Secrets.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the project associated with the Secrets, in the format `projects/*` or `projects/*/locations/*`",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "pageSize": {
          "description": "Optional. The maximum number of results to be returned in a single page. If set to 0, the server decides the number of results to return. If the number is greater than 25000, it is capped at 25000.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Optional. Pagination token, returned earlier via ListSecretsResponse.next_page_token.",
          "location": "query",
          "type": "string"
        },
        "filter": {
          "description": "Optional. Filter string, adhering to the rules in [List-operation filtering](https://cloud.google.com/secret-manager/docs/filtering). List only secrets matching the filter. If filter is empty, all secrets are listed.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListSecretsResponse"
    },
    {
      "operation_id": "secretmanager.projects.secrets.create",
      "resource": "projects.secrets",
      "action": "create",
      "http_method": "POST",
      "path_template": "v1/{+parent}/secrets",
      "description": "Creates a new Secret containing no SecretVersions.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the project to associate with the Secret, in the format `projects/*` or `projects/*/locations/*`.",
          "pattern": "^projects/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "secretId": {
          "description": "Required. This must be unique within the project. A secret ID is a string with a maximum length of 255 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore (`_`) characters.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": "Secret",
      "body_schema": {
        "id": "Secret",
        "description": "A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
            "readOnly": true,
            "type": "string"
          },
          "replication": {
            "description": "Optional. Immutable. The replication policy of the secret data attached to the Secret. The replication policy cannot be changed after the Secret has been created.",
            "$ref": "Replication"
          },
          "createTime": {
            "description": "Output only. The time at which the Secret was created.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "labels": {
            "description": "The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\\p{Ll}\\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "topics": {
            "description": "Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.",
            "type": "array",
            "items": {
              "$ref": "Topic"
            }
          },
          "expireTime": {
            "description": "Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.",
            "type": "string",
            "format": "google-datetime"
          },
          "ttl": {
            "description": "Input only. The TTL for the Secret.",
            "type": "string",
            "format": "google-duration"
          },
          "etag": {
            "description": "Optional. Etag of the currently stored Secret.",
            "type": "string"
          },
          "rotation": {
            "description": "Optional. Rotation policy attached to the Secret. May be excluded if there is no rotation policy.",
            "$ref": "Rotation"
          },
          "versionAliases": {
            "description": "Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. Access by alias is only be supported on GetSecretVersion and AccessSecretVersion.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "int64"
            }
          },
          "annotations": {
            "description": "Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "versionDestroyTtl": {
            "description": "Optional. Secret Version TTL after destruction request This is a part of the Delayed secret version destroy feature. For secret with TTL>0, version destruction doesn't happen immediately on calling destroy instead the version goes to a disabled state and destruction happens after the TTL expires.",
            "type": "string",
            "format": "google-duration"
          },
          "customerManagedEncryption": {
            "description": "Optional. The customer-managed encryption configuration of the regionalized secrets. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.",
            "$ref": "CustomerManagedEncryption"
          },
          "tags": {
            "description": "Optional. Input only. Immutable. Mapping of Tag keys/values directly bound to this resource. For example: \"123/environment\": \"production\", \"123/costCenter\": \"marketing\" Tags are used to organize and group resources. Tags can be used to control policy evaluation for the resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Secret"
    },
    {
      "operation_id": "secretmanager.projects.secrets.addVersion",
      "resource": "projects.secrets",
      "action": "addVersion",
      "http_method": "POST",
      "path_template": "v1/{+parent}:addVersion",
      "description": "Creates a new SecretVersion containing secret data and attaches it to an existing Secret.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the Secret to associate with the SecretVersion in the format `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "AddSecretVersionRequest",
      "body_schema": {
        "id": "AddSecretVersionRequest",
        "description": "Request message for SecretManagerService.AddSecretVersion.",
        "type": "object",
        "properties": {
          "payload": {
            "description": "Required. The secret payload of the SecretVersion.",
            "$ref": "SecretPayload"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.secrets.get",
      "resource": "projects.secrets",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets metadata for a given Secret.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the Secret, in the format `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Secret"
    },
    {
      "operation_id": "secretmanager.projects.secrets.patch",
      "resource": "projects.secrets",
      "action": "patch",
      "http_method": "PATCH",
      "path_template": "v1/{+name}",
      "description": "Updates metadata of an existing Secret.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "updateMask": {
          "description": "Required. Specifies the fields to be updated.",
          "location": "query",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "body_schema_ref": "Secret",
      "body_schema": {
        "id": "Secret",
        "description": "A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
            "readOnly": true,
            "type": "string"
          },
          "replication": {
            "description": "Optional. Immutable. The replication policy of the secret data attached to the Secret. The replication policy cannot be changed after the Secret has been created.",
            "$ref": "Replication"
          },
          "createTime": {
            "description": "Output only. The time at which the Secret was created.",
            "readOnly": true,
            "type": "string",
            "format": "google-datetime"
          },
          "labels": {
            "description": "The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\\p{Ll}\\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "topics": {
            "description": "Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.",
            "type": "array",
            "items": {
              "$ref": "Topic"
            }
          },
          "expireTime": {
            "description": "Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.",
            "type": "string",
            "format": "google-datetime"
          },
          "ttl": {
            "description": "Input only. The TTL for the Secret.",
            "type": "string",
            "format": "google-duration"
          },
          "etag": {
            "description": "Optional. Etag of the currently stored Secret.",
            "type": "string"
          },
          "rotation": {
            "description": "Optional. Rotation policy attached to the Secret. May be excluded if there is no rotation policy.",
            "$ref": "Rotation"
          },
          "versionAliases": {
            "description": "Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. Access by alias is only be supported on GetSecretVersion and AccessSecretVersion.",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "int64"
            }
          },
          "annotations": {
            "description": "Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "versionDestroyTtl": {
            "description": "Optional. Secret Version TTL after destruction request This is a part of the Delayed secret version destroy feature. For secret with TTL>0, version destruction doesn't happen immediately on calling destroy instead the version goes to a disabled state and destruction happens after the TTL expires.",
            "type": "string",
            "format": "google-duration"
          },
          "customerManagedEncryption": {
            "description": "Optional. The customer-managed encryption configuration of the regionalized secrets. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.",
            "$ref": "CustomerManagedEncryption"
          },
          "tags": {
            "description": "Optional. Input only. Immutable. Mapping of Tag keys/values directly bound to this resource. For example: \"123/environment\": \"production\", \"123/costCenter\": \"marketing\" Tags are used to organize and group resources. Tags can be used to control policy evaluation for the resource.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Secret"
    },
    {
      "operation_id": "secretmanager.projects.secrets.delete",
      "resource": "projects.secrets",
      "action": "delete",
      "http_method": "DELETE",
      "path_template": "v1/{+name}",
      "description": "Deletes a Secret.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the Secret to delete in the format `projects/*/secrets/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "etag": {
          "description": "Optional. Etag of the Secret. The request succeeds if it matches the etag of the currently stored secret object. If the etag is omitted, the request succeeds.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Empty"
    },
    {
      "operation_id": "secretmanager.projects.secrets.setIamPolicy",
      "resource": "projects.secrets",
      "action": "setIamPolicy",
      "http_method": "POST",
      "path_template": "v1/{+resource}:setIamPolicy",
      "description": "Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "SetIamPolicyRequest",
      "body_schema": {
        "id": "SetIamPolicyRequest",
        "description": "Request message for `SetIamPolicy` method.",
        "type": "object",
        "properties": {
          "policy": {
            "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.",
            "$ref": "Policy"
          },
          "updateMask": {
            "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
            "type": "string",
            "format": "google-fieldmask"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Policy"
    },
    {
      "operation_id": "secretmanager.projects.secrets.getIamPolicy",
      "resource": "projects.secrets",
      "action": "getIamPolicy",
      "http_method": "GET",
      "path_template": "v1/{+resource}:getIamPolicy",
      "description": "Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "options.requestedPolicyVersion": {
          "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "location": "query",
          "type": "integer",
          "format": "int32"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "Policy"
    },
    {
      "operation_id": "secretmanager.projects.secrets.testIamPermissions",
      "resource": "projects.secrets",
      "action": "testIamPermissions",
      "http_method": "POST",
      "path_template": "v1/{+resource}:testIamPermissions",
      "description": "Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
      "required_params": [
        "resource"
      ],
      "parameters": {
        "resource": {
          "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "TestIamPermissionsRequest",
      "body_schema": {
        "id": "TestIamPermissionsRequest",
        "description": "Request message for `TestIamPermissions` method.",
        "type": "object",
        "properties": {
          "permissions": {
            "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "TestIamPermissionsResponse"
    },
    {
      "operation_id": "secretmanager.projects.secrets.versions.list",
      "resource": "projects.secrets.versions",
      "action": "list",
      "http_method": "GET",
      "path_template": "v1/{+parent}/versions",
      "description": "Lists SecretVersions. This call does not return secret data.",
      "required_params": [
        "parent"
      ],
      "parameters": {
        "parent": {
          "description": "Required. The resource name of the Secret associated with the SecretVersions to list, in the format `projects/*/secrets/*` or `projects/*/locations/*/secrets/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        },
        "pageSize": {
          "description": "Optional. The maximum number of results to be returned in a single page. If set to 0, the server decides the number of results to return. If the number is greater than 25000, it is capped at 25000.",
          "location": "query",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "Optional. Pagination token, returned earlier via ListSecretVersionsResponse.next_page_token][].",
          "location": "query",
          "type": "string"
        },
        "filter": {
          "description": "Optional. Filter string, adhering to the rules in [List-operation filtering](https://cloud.google.com/secret-manager/docs/filtering). List only secret versions matching the filter. If filter is empty, all secret versions are listed.",
          "location": "query",
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "ListSecretVersionsResponse"
    },
    {
      "operation_id": "secretmanager.projects.secrets.versions.get",
      "resource": "projects.secrets.versions",
      "action": "get",
      "http_method": "GET",
      "path_template": "v1/{+name}",
      "description": "Gets metadata for a SecretVersion. `projects/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`. `projects/*/secrets/*/versions/latest` or `projects/*/locations/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
          "pattern": "^projects/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.secrets.versions.access",
      "resource": "projects.secrets.versions",
      "action": "access",
      "http_method": "GET",
      "path_template": "v1/{+name}:access",
      "description": "Accesses a SecretVersion. This call returns the secret data. `projects/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`. `projects/*/secrets/*/versions/latest` or `projects/*/locations/*/secrets/*/versions/latest` is an alias to the most recently created SecretVersion.",
          "pattern": "^projects/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": null,
      "body_schema": {},
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "AccessSecretVersionResponse"
    },
    {
      "operation_id": "secretmanager.projects.secrets.versions.disable",
      "resource": "projects.secrets.versions",
      "action": "disable",
      "http_method": "POST",
      "path_template": "v1/{+name}:disable",
      "description": "Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion to disable in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "DisableSecretVersionRequest",
      "body_schema": {
        "id": "DisableSecretVersionRequest",
        "description": "Request message for SecretManagerService.DisableSecretVersion.",
        "type": "object",
        "properties": {
          "etag": {
            "description": "Optional. Etag of the SecretVersion. The request succeeds if it matches the etag of the currently stored secret version object. If the etag is omitted, the request succeeds.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.secrets.versions.enable",
      "resource": "projects.secrets.versions",
      "action": "enable",
      "http_method": "POST",
      "path_template": "v1/{+name}:enable",
      "description": "Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion to enable in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "EnableSecretVersionRequest",
      "body_schema": {
        "id": "EnableSecretVersionRequest",
        "description": "Request message for SecretManagerService.EnableSecretVersion.",
        "type": "object",
        "properties": {
          "etag": {
            "description": "Optional. Etag of the SecretVersion. The request succeeds if it matches the etag of the currently stored secret version object. If the etag is omitted, the request succeeds.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    },
    {
      "operation_id": "secretmanager.projects.secrets.versions.destroy",
      "resource": "projects.secrets.versions",
      "action": "destroy",
      "http_method": "POST",
      "path_template": "v1/{+name}:destroy",
      "description": "Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data.",
      "required_params": [
        "name"
      ],
      "parameters": {
        "name": {
          "description": "Required. The resource name of the SecretVersion to destroy in the format `projects/*/secrets/*/versions/*` or `projects/*/locations/*/secrets/*/versions/*`.",
          "pattern": "^projects/[^/]+/secrets/[^/]+/versions/[^/]+$",
          "location": "path",
          "required": true,
          "type": "string"
        }
      },
      "body_schema_ref": "DestroySecretVersionRequest",
      "body_schema": {
        "id": "DestroySecretVersionRequest",
        "description": "Request message for SecretManagerService.DestroySecretVersion.",
        "type": "object",
        "properties": {
          "etag": {
            "description": "Optional. Etag of the SecretVersion. The request succeeds if it matches the etag of the currently stored secret version object. If the etag is omitted, the request succeeds.",
            "type": "string"
          }
        }
      },
      "scopes_required": [
        "https://www.googleapis.com/auth/cloud-platform"
      ],
      "response_type": "SecretVersion"
    }
  ]
}